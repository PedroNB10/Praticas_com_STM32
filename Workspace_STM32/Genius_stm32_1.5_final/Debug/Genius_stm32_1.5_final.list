
Genius_stm32_1.5_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001670  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800177c  0800177c  0001177c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a0  080017a0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080017a0  080017a0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017a0  080017a0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a0  080017a0  000117a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080017a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000084  0800182c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  0800182c  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038c9  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f75  00000000  00000000  00023976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  000248f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000370  00000000  00000000  00024cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015bb0  00000000  00000000  00025068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041c3  00000000  00000000  0003ac18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007da1f  00000000  00000000  0003eddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc7fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f54  00000000  00000000  000bc878  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08001764 	.word	0x08001764

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08001764 	.word	0x08001764

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fb51 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f837 	bl	80001c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f871 	bl	8000240 <MX_GPIO_Init>
	  	  //BOTAO VERMELHO: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1  BOTAO 0
	  	  //BOTAO AZUL: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1     BOTAO 1
	  	  //BOTAO VERDE: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1   BOTAO 2
	  	  //BOTAO AMARELO: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1  BOTAO 3

	  	  	proximaRodada();
 800015e:	f000 f8bd 	bl	80002dc <proximaRodada>
	 	    reproduzirSequencia();
 8000162:	f000 f8dd 	bl	8000320 <reproduzirSequencia>
	 	    aguardarJogador();
 8000166:	f000 f971 	bl	800044c <aguardarJogador>
	 	    // estrutura usada para reiniciar todas as variáveis (novo jogo)
	 	    if (game_over == true) {
 800016a:	4b11      	ldr	r3, [pc, #68]	; (80001b0 <main+0x64>)
 800016c:	681a      	ldr	r2, [r3, #0]
 800016e:	4b11      	ldr	r3, [pc, #68]	; (80001b4 <main+0x68>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	429a      	cmp	r2, r3
 8000174:	d117      	bne.n	80001a6 <main+0x5a>
	 	    	for(int i=0;i<32;i++)
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e007      	b.n	800018c <main+0x40>
	 	    			sequencia[i] = 0; // caso comentar, não dá erros
 800017c:	4a0e      	ldr	r2, [pc, #56]	; (80001b8 <main+0x6c>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	2100      	movs	r1, #0
 8000182:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	    	for(int i=0;i<32;i++)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	3301      	adds	r3, #1
 800018a:	607b      	str	r3, [r7, #4]
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	2b1f      	cmp	r3, #31
 8000190:	ddf4      	ble.n	800017c <main+0x30>
	 	      rodada = 0;
 8000192:	4b0a      	ldr	r3, [pc, #40]	; (80001bc <main+0x70>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
	 	      passo = 0;
 8000198:	4b09      	ldr	r3, [pc, #36]	; (80001c0 <main+0x74>)
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
	 	      game_over = false;
 800019e:	4b09      	ldr	r3, [pc, #36]	; (80001c4 <main+0x78>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a03      	ldr	r2, [pc, #12]	; (80001b0 <main+0x64>)
 80001a4:	6013      	str	r3, [r2, #0]
	 	    }
	 	    HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fb87 	bl	80008bc <HAL_Delay>
	  	  	proximaRodada();
 80001ae:	e7d6      	b.n	800015e <main+0x12>
 80001b0:	2000012c 	.word	0x2000012c
 80001b4:	20000010 	.word	0x20000010
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	20000120 	.word	0x20000120
 80001c0:	20000124 	.word	0x20000124
 80001c4:	20000128 	.word	0x20000128

080001c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b090      	sub	sp, #64	; 0x40
 80001cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ce:	f107 0318 	add.w	r3, r7, #24
 80001d2:	2228      	movs	r2, #40	; 0x28
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f001 fa14 	bl	8001604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]
 80001e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f2:	2310      	movs	r3, #16
 80001f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f6:	2300      	movs	r3, #0
 80001f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	4618      	mov	r0, r3
 8000200:	f000 fdec 	bl	8000ddc <HAL_RCC_OscConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800020a:	f000 fa35 	bl	8000678 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020e:	230f      	movs	r3, #15
 8000210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f858 	bl	80012dc <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000232:	f000 fa21 	bl	8000678 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	; 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b086      	sub	sp, #24
 8000244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0308 	add.w	r3, r7, #8
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <MX_GPIO_Init+0x90>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <MX_GPIO_Init+0x90>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <MX_GPIO_Init+0x90>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0308 	and.w	r3, r3, #8
 8000268:	607b      	str	r3, [r7, #4]
 800026a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_GPIO_Init+0x90>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a17      	ldr	r2, [pc, #92]	; (80002d0 <MX_GPIO_Init+0x90>)
 8000272:	f043 0304 	orr.w	r3, r3, #4
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_GPIO_Init+0x90>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0304 	and.w	r3, r3, #4
 8000280:	603b      	str	r3, [r7, #0]
 8000282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800028a:	4812      	ldr	r0, [pc, #72]	; (80002d4 <MX_GPIO_Init+0x94>)
 800028c:	f000 fd8d 	bl	8000daa <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000290:	f640 4303 	movw	r3, #3075	; 0xc03
 8000294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800029e:	f107 0308 	add.w	r3, r7, #8
 80002a2:	4619      	mov	r1, r3
 80002a4:	480c      	ldr	r0, [pc, #48]	; (80002d8 <MX_GPIO_Init+0x98>)
 80002a6:	f000 fc0f 	bl	8000ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80002aa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80002ae:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	2302      	movs	r3, #2
 80002ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	f107 0308 	add.w	r3, r7, #8
 80002c0:	4619      	mov	r1, r3
 80002c2:	4804      	ldr	r0, [pc, #16]	; (80002d4 <MX_GPIO_Init+0x94>)
 80002c4:	f000 fc00 	bl	8000ac8 <HAL_GPIO_Init>

}
 80002c8:	bf00      	nop
 80002ca:	3718      	adds	r7, #24
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	40021000 	.word	0x40021000
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40010c00 	.word	0x40010c00

080002dc <proximaRodada>:

/* USER CODE BEGIN 4 */
//insrindo funções inicio
void proximaRodada() {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0

  int sorteio = rand()%4; //comando correto:  int sorteio = random(4);
 80002e2:	f001 f997 	bl	8001614 <rand>
 80002e6:	4603      	mov	r3, r0
 80002e8:	425a      	negs	r2, r3
 80002ea:	f003 0303 	and.w	r3, r3, #3
 80002ee:	f002 0203 	and.w	r2, r2, #3
 80002f2:	bf58      	it	pl
 80002f4:	4253      	negpl	r3, r2
 80002f6:	607b      	str	r3, [r7, #4]




  sequencia[rodada] = sorteio;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <proximaRodada+0x3c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4907      	ldr	r1, [pc, #28]	; (800031c <proximaRodada+0x40>)
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  rodada = rodada + 1;
 8000304:	4b04      	ldr	r3, [pc, #16]	; (8000318 <proximaRodada+0x3c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	3301      	adds	r3, #1
 800030a:	4a03      	ldr	r2, [pc, #12]	; (8000318 <proximaRodada+0x3c>)
 800030c:	6013      	str	r3, [r2, #0]
  //Serial.print(sorteio);
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000120 	.word	0x20000120
 800031c:	200000a0 	.word	0x200000a0

08000320 <reproduzirSequencia>:

void reproduzirSequencia() {
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
  for (int i = 0; i < rodada; i++) {
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e07d      	b.n	8000428 <reproduzirSequencia+0x108>

        if(leds[sequencia[i]] == leds[0]){// 8 é o pino
 800032c:	4a43      	ldr	r2, [pc, #268]	; (800043c <reproduzirSequencia+0x11c>)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000334:	4a42      	ldr	r2, [pc, #264]	; (8000440 <reproduzirSequencia+0x120>)
 8000336:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <reproduzirSequencia+0x120>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	429a      	cmp	r2, r3
 8000340:	d113      	bne.n	800036a <reproduzirSequencia+0x4a>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 8000342:	2201      	movs	r2, #1
 8000344:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000348:	483e      	ldr	r0, [pc, #248]	; (8000444 <reproduzirSequencia+0x124>)
 800034a:	f000 fd2e 	bl	8000daa <HAL_GPIO_WritePin>
            HAL_Delay(500);
 800034e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000352:	f000 fab3 	bl	80008bc <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800035c:	4839      	ldr	r0, [pc, #228]	; (8000444 <reproduzirSequencia+0x124>)
 800035e:	f000 fd24 	bl	8000daa <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8000362:	2064      	movs	r0, #100	; 0x64
 8000364:	f000 faaa 	bl	80008bc <HAL_Delay>
 8000368:	e05b      	b.n	8000422 <reproduzirSequencia+0x102>
          }

      else  if(leds[sequencia[i]] == leds[1]){
 800036a:	4a34      	ldr	r2, [pc, #208]	; (800043c <reproduzirSequencia+0x11c>)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000372:	4a33      	ldr	r2, [pc, #204]	; (8000440 <reproduzirSequencia+0x120>)
 8000374:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000378:	4b31      	ldr	r3, [pc, #196]	; (8000440 <reproduzirSequencia+0x120>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	429a      	cmp	r2, r3
 800037e:	d113      	bne.n	80003a8 <reproduzirSequencia+0x88>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 8000380:	2201      	movs	r2, #1
 8000382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000386:	482f      	ldr	r0, [pc, #188]	; (8000444 <reproduzirSequencia+0x124>)
 8000388:	f000 fd0f 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(500);
 800038c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000390:	f000 fa94 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 8000394:	2200      	movs	r2, #0
 8000396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800039a:	482a      	ldr	r0, [pc, #168]	; (8000444 <reproduzirSequencia+0x124>)
 800039c:	f000 fd05 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(100);
 80003a0:	2064      	movs	r0, #100	; 0x64
 80003a2:	f000 fa8b 	bl	80008bc <HAL_Delay>
 80003a6:	e03c      	b.n	8000422 <reproduzirSequencia+0x102>
        }

      else  if(leds[sequencia[i]] == leds[2]){
 80003a8:	4a24      	ldr	r2, [pc, #144]	; (800043c <reproduzirSequencia+0x11c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b0:	4a23      	ldr	r2, [pc, #140]	; (8000440 <reproduzirSequencia+0x120>)
 80003b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <reproduzirSequencia+0x120>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d113      	bne.n	80003e6 <reproduzirSequencia+0xc6>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 80003be:	2201      	movs	r2, #1
 80003c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003c4:	481f      	ldr	r0, [pc, #124]	; (8000444 <reproduzirSequencia+0x124>)
 80003c6:	f000 fcf0 	bl	8000daa <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80003ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003ce:	f000 fa75 	bl	80008bc <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80003d2:	2200      	movs	r2, #0
 80003d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d8:	481a      	ldr	r0, [pc, #104]	; (8000444 <reproduzirSequencia+0x124>)
 80003da:	f000 fce6 	bl	8000daa <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80003de:	2064      	movs	r0, #100	; 0x64
 80003e0:	f000 fa6c 	bl	80008bc <HAL_Delay>
 80003e4:	e01d      	b.n	8000422 <reproduzirSequencia+0x102>
    }

      else  if(leds[sequencia[i]] == leds[3]){
 80003e6:	4a15      	ldr	r2, [pc, #84]	; (800043c <reproduzirSequencia+0x11c>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ee:	4a14      	ldr	r2, [pc, #80]	; (8000440 <reproduzirSequencia+0x120>)
 80003f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <reproduzirSequencia+0x120>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d112      	bne.n	8000422 <reproduzirSequencia+0x102>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000402:	4810      	ldr	r0, [pc, #64]	; (8000444 <reproduzirSequencia+0x124>)
 8000404:	f000 fcd1 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(500);
 8000408:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800040c:	f000 fa56 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000410:	2200      	movs	r2, #0
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	480b      	ldr	r0, [pc, #44]	; (8000444 <reproduzirSequencia+0x124>)
 8000418:	f000 fcc7 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(100);
 800041c:	2064      	movs	r0, #100	; 0x64
 800041e:	f000 fa4d 	bl	80008bc <HAL_Delay>
  for (int i = 0; i < rodada; i++) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3301      	adds	r3, #1
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <reproduzirSequencia+0x128>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	429a      	cmp	r2, r3
 8000430:	f6ff af7c 	blt.w	800032c <reproduzirSequencia+0xc>
        }


  }
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	200000a0 	.word	0x200000a0
 8000440:	20000000 	.word	0x20000000
 8000444:	40010800 	.word	0x40010800
 8000448:	20000120 	.word	0x20000120

0800044c <aguardarJogador>:

void aguardarJogador() {
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
  int botao_pressionado = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < rodada; i++) {
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	e0f0      	b.n	800063e <aguardarJogador+0x1f2>
     int jogada_efetuada = false;
 800045c:	4b7e      	ldr	r3, [pc, #504]	; (8000658 <aguardarJogador+0x20c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	60fb      	str	r3, [r7, #12]
    while (jogada_efetuada == false) {
 8000462:	e07d      	b.n	8000560 <aguardarJogador+0x114>
      for (int i = 0; i <= 3; i++) {
 8000464:	2300      	movs	r3, #0
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	e077      	b.n	800055a <aguardarJogador+0x10e>
         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1) {
 800046a:	2101      	movs	r1, #1
 800046c:	487b      	ldr	r0, [pc, #492]	; (800065c <aguardarJogador+0x210>)
 800046e:	f000 fc85 	bl	8000d7c <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d115      	bne.n	80004a4 <aguardarJogador+0x58>
          botao_pressionado = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000482:	4877      	ldr	r0, [pc, #476]	; (8000660 <aguardarJogador+0x214>)
 8000484:	f000 fc91 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(300);
 8000488:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800048c:	f000 fa16 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000496:	4872      	ldr	r0, [pc, #456]	; (8000660 <aguardarJogador+0x214>)
 8000498:	f000 fc87 	bl	8000daa <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 800049c:	4b71      	ldr	r3, [pc, #452]	; (8000664 <aguardarJogador+0x218>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	60fb      	str	r3, [r7, #12]
 80004a2:	e057      	b.n	8000554 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1) {
 80004a4:	2102      	movs	r1, #2
 80004a6:	486d      	ldr	r0, [pc, #436]	; (800065c <aguardarJogador+0x210>)
 80004a8:	f000 fc68 	bl	8000d7c <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d115      	bne.n	80004de <aguardarJogador+0x92>
          botao_pressionado = 1;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004bc:	4868      	ldr	r0, [pc, #416]	; (8000660 <aguardarJogador+0x214>)
 80004be:	f000 fc74 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80004c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004c6:	f000 f9f9 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d0:	4863      	ldr	r0, [pc, #396]	; (8000660 <aguardarJogador+0x214>)
 80004d2:	f000 fc6a 	bl	8000daa <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 80004d6:	4b63      	ldr	r3, [pc, #396]	; (8000664 <aguardarJogador+0x218>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	e03a      	b.n	8000554 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
 80004de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004e2:	485e      	ldr	r0, [pc, #376]	; (800065c <aguardarJogador+0x210>)
 80004e4:	f000 fc4a 	bl	8000d7c <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d115      	bne.n	800051a <aguardarJogador+0xce>
          botao_pressionado = 2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004f8:	4859      	ldr	r0, [pc, #356]	; (8000660 <aguardarJogador+0x214>)
 80004fa:	f000 fc56 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80004fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000502:	f000 f9db 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050c:	4854      	ldr	r0, [pc, #336]	; (8000660 <aguardarJogador+0x214>)
 800050e:	f000 fc4c 	bl	8000daa <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 8000512:	4b54      	ldr	r3, [pc, #336]	; (8000664 <aguardarJogador+0x218>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e01c      	b.n	8000554 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 800051a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051e:	484f      	ldr	r0, [pc, #316]	; (800065c <aguardarJogador+0x210>)
 8000520:	f000 fc2c 	bl	8000d7c <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d114      	bne.n	8000554 <aguardarJogador+0x108>
          botao_pressionado = 3;
 800052a:	2303      	movs	r3, #3
 800052c:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000534:	484a      	ldr	r0, [pc, #296]	; (8000660 <aguardarJogador+0x214>)
 8000536:	f000 fc38 	bl	8000daa <HAL_GPIO_WritePin>
          HAL_Delay(300);
 800053a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800053e:	f000 f9bd 	bl	80008bc <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000548:	4845      	ldr	r0, [pc, #276]	; (8000660 <aguardarJogador+0x214>)
 800054a:	f000 fc2e 	bl	8000daa <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 800054e:	4b45      	ldr	r3, [pc, #276]	; (8000664 <aguardarJogador+0x218>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	60fb      	str	r3, [r7, #12]
      for (int i = 0; i <= 3; i++) {
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	3301      	adds	r3, #1
 8000558:	60bb      	str	r3, [r7, #8]
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b03      	cmp	r3, #3
 800055e:	dd84      	ble.n	800046a <aguardarJogador+0x1e>
    while (jogada_efetuada == false) {
 8000560:	4b3d      	ldr	r3, [pc, #244]	; (8000658 <aguardarJogador+0x20c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	68fa      	ldr	r2, [r7, #12]
 8000566:	429a      	cmp	r2, r3
 8000568:	f43f af7c 	beq.w	8000464 <aguardarJogador+0x18>


      }
    }
    //verificar a jogada
    if (sequencia[passo] != botao_pressionado) {
 800056c:	4b3e      	ldr	r3, [pc, #248]	; (8000668 <aguardarJogador+0x21c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a3e      	ldr	r2, [pc, #248]	; (800066c <aguardarJogador+0x220>)
 8000572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000576:	697a      	ldr	r2, [r7, #20]
 8000578:	429a      	cmp	r2, r3
 800057a:	d058      	beq.n	800062e <aguardarJogador+0x1e2>
      //efeito luminoso/sonoro indicando que o jogador perdeu
      for (int i = 0; i <= 3; i++) {
 800057c:	2300      	movs	r3, #0
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	e04d      	b.n	800061e <aguardarJogador+0x1d2>


            if(i == 0){
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d10f      	bne.n	80005a8 <aguardarJogador+0x15c>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	4834      	ldr	r0, [pc, #208]	; (8000660 <aguardarJogador+0x214>)
 8000590:	f000 fc0b 	bl	8000daa <HAL_GPIO_WritePin>
              HAL_Delay(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f000 f991 	bl	80008bc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a0:	482f      	ldr	r0, [pc, #188]	; (8000660 <aguardarJogador+0x214>)
 80005a2:	f000 fc02 	bl	8000daa <HAL_GPIO_WritePin>
 80005a6:	e037      	b.n	8000618 <aguardarJogador+0x1cc>
              }

            else if(i == 1){
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d10f      	bne.n	80005ce <aguardarJogador+0x182>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b4:	482a      	ldr	r0, [pc, #168]	; (8000660 <aguardarJogador+0x214>)
 80005b6:	f000 fbf8 	bl	8000daa <HAL_GPIO_WritePin>
              HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 f97e 	bl	80008bc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c6:	4826      	ldr	r0, [pc, #152]	; (8000660 <aguardarJogador+0x214>)
 80005c8:	f000 fbef 	bl	8000daa <HAL_GPIO_WritePin>
 80005cc:	e024      	b.n	8000618 <aguardarJogador+0x1cc>
              }

            else if(i == 2){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b02      	cmp	r3, #2
 80005d2:	d10f      	bne.n	80005f4 <aguardarJogador+0x1a8>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005da:	4821      	ldr	r0, [pc, #132]	; (8000660 <aguardarJogador+0x214>)
 80005dc:	f000 fbe5 	bl	8000daa <HAL_GPIO_WritePin>
              HAL_Delay(100);
 80005e0:	2064      	movs	r0, #100	; 0x64
 80005e2:	f000 f96b 	bl	80008bc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ec:	481c      	ldr	r0, [pc, #112]	; (8000660 <aguardarJogador+0x214>)
 80005ee:	f000 fbdc 	bl	8000daa <HAL_GPIO_WritePin>
 80005f2:	e011      	b.n	8000618 <aguardarJogador+0x1cc>
              }

            else if(i == 3){
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d10e      	bne.n	8000618 <aguardarJogador+0x1cc>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000600:	4817      	ldr	r0, [pc, #92]	; (8000660 <aguardarJogador+0x214>)
 8000602:	f000 fbd2 	bl	8000daa <HAL_GPIO_WritePin>
              HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 f958 	bl	80008bc <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000612:	4813      	ldr	r0, [pc, #76]	; (8000660 <aguardarJogador+0x214>)
 8000614:	f000 fbc9 	bl	8000daa <HAL_GPIO_WritePin>
      for (int i = 0; i <= 3; i++) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b03      	cmp	r3, #3
 8000622:	ddae      	ble.n	8000582 <aguardarJogador+0x136>
          }



      }
      game_over = true;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <aguardarJogador+0x218>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a11      	ldr	r2, [pc, #68]	; (8000670 <aguardarJogador+0x224>)
 800062a:	6013      	str	r3, [r2, #0]
      break;
 800062c:	e00d      	b.n	800064a <aguardarJogador+0x1fe>
    }
    passo = passo + 1;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <aguardarJogador+0x21c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <aguardarJogador+0x21c>)
 8000636:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < rodada; i++) {
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	3301      	adds	r3, #1
 800063c:	613b      	str	r3, [r7, #16]
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <aguardarJogador+0x228>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	693a      	ldr	r2, [r7, #16]
 8000644:	429a      	cmp	r2, r3
 8000646:	f6ff af09 	blt.w	800045c <aguardarJogador+0x10>
  }
  passo = 0;
 800064a:	4b07      	ldr	r3, [pc, #28]	; (8000668 <aguardarJogador+0x21c>)
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000128 	.word	0x20000128
 800065c:	40010c00 	.word	0x40010c00
 8000660:	40010800 	.word	0x40010800
 8000664:	20000010 	.word	0x20000010
 8000668:	20000124 	.word	0x20000124
 800066c:	200000a0 	.word	0x200000a0
 8000670:	2000012c 	.word	0x2000012c
 8000674:	20000120 	.word	0x20000120

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800067e:	e7fe      	b.n	800067e <Error_Handler+0x6>

08000680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000686:	4b15      	ldr	r3, [pc, #84]	; (80006dc <HAL_MspInit+0x5c>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a14      	ldr	r2, [pc, #80]	; (80006dc <HAL_MspInit+0x5c>)
 800068c:	f043 0301 	orr.w	r3, r3, #1
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_MspInit+0x5c>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	60bb      	str	r3, [r7, #8]
 800069c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x5c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x5c>)
 80006a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a8:	61d3      	str	r3, [r2, #28]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x5c>)
 80006ac:	69db      	ldr	r3, [r3, #28]
 80006ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x60>)
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <HAL_MspInit+0x60>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3714      	adds	r7, #20
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	40021000 	.word	0x40021000
 80006e0:	40010000 	.word	0x40010000

080006e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <NMI_Handler+0x4>

080006ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ee:	e7fe      	b.n	80006ee <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <MemManage_Handler+0x4>

080006f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fa:	e7fe      	b.n	80006fa <BusFault_Handler+0x4>

080006fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <UsageFault_Handler+0x4>

08000702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr

08000726 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072a:	f000 f8ab 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <_sbrk+0x5c>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_sbrk+0x60>)
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000748:	4b13      	ldr	r3, [pc, #76]	; (8000798 <_sbrk+0x64>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d102      	bne.n	8000756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <_sbrk+0x64>)
 8000752:	4a12      	ldr	r2, [pc, #72]	; (800079c <_sbrk+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <_sbrk+0x64>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4413      	add	r3, r2
 800075e:	693a      	ldr	r2, [r7, #16]
 8000760:	429a      	cmp	r2, r3
 8000762:	d207      	bcs.n	8000774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000764:	f000 ff24 	bl	80015b0 <__errno>
 8000768:	4602      	mov	r2, r0
 800076a:	230c      	movs	r3, #12
 800076c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800076e:	f04f 33ff 	mov.w	r3, #4294967295
 8000772:	e009      	b.n	8000788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077a:	4b07      	ldr	r3, [pc, #28]	; (8000798 <_sbrk+0x64>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <_sbrk+0x64>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000786:	68fb      	ldr	r3, [r7, #12]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3718      	adds	r7, #24
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20005000 	.word	0x20005000
 8000794:	00000400 	.word	0x00000400
 8000798:	20000130 	.word	0x20000130
 800079c:	20000148 	.word	0x20000148

080007a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f7ff ffe5 	bl	80007a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f000 fef1 	bl	80015bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fcb7 	bl	800014c <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80007e8:	080017a8 	.word	0x080017a8
  ldr r2, =_sbss
 80007ec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80007f0:	20000144 	.word	0x20000144

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_Init+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_Init+0x28>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f929 	bl	8000a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f808 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff ff34 	bl	8000680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f933 	bl	8000aae <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f909 	bl	8000a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000014 	.word	0x20000014
 800087c:	2000001c 	.word	0x2000001c
 8000880:	20000018 	.word	0x20000018

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	2000001c 	.word	0x2000001c
 80008a4:	2000013c 	.word	0x2000013c

080008a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	2000013c 	.word	0x2000013c

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff fff0 	bl	80008a8 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_Delay+0x40>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffe0 	bl	80008a8 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000001c 	.word	0x2000001c

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000974:	2b00      	cmp	r3, #0
 8000976:	db0a      	blt.n	800098e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	b2da      	uxtb	r2, r3
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <__NVIC_SetPriority+0x4c>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	440b      	add	r3, r1
 8000988:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800098c:	e00a      	b.n	80009a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4908      	ldr	r1, [pc, #32]	; (80009b4 <__NVIC_SetPriority+0x50>)
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	f003 030f 	and.w	r3, r3, #15
 800099a:	3b04      	subs	r3, #4
 800099c:	0112      	lsls	r2, r2, #4
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	440b      	add	r3, r1
 80009a2:	761a      	strb	r2, [r3, #24]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	e000e100 	.word	0xe000e100
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b089      	sub	sp, #36	; 0x24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009cc:	69fb      	ldr	r3, [r7, #28]
 80009ce:	f1c3 0307 	rsb	r3, r3, #7
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	bf28      	it	cs
 80009d6:	2304      	movcs	r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3304      	adds	r3, #4
 80009de:	2b06      	cmp	r3, #6
 80009e0:	d902      	bls.n	80009e8 <NVIC_EncodePriority+0x30>
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	3b03      	subs	r3, #3
 80009e6:	e000      	b.n	80009ea <NVIC_EncodePriority+0x32>
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	f04f 32ff 	mov.w	r2, #4294967295
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43da      	mvns	r2, r3
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	401a      	ands	r2, r3
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a00:	f04f 31ff 	mov.w	r1, #4294967295
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0a:	43d9      	mvns	r1, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a10:	4313      	orrs	r3, r2
         );
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3724      	adds	r7, #36	; 0x24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a2c:	d301      	bcc.n	8000a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a2e:	2301      	movs	r3, #1
 8000a30:	e00f      	b.n	8000a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a32:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <SysTick_Config+0x40>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	3b01      	subs	r3, #1
 8000a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a3a:	210f      	movs	r1, #15
 8000a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a40:	f7ff ff90 	bl	8000964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <SysTick_Config+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SysTick_Config+0x40>)
 8000a4c:	2207      	movs	r2, #7
 8000a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff49 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
 8000a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a88:	f7ff ff5e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	6978      	ldr	r0, [r7, #20]
 8000a94:	f7ff ff90 	bl	80009b8 <NVIC_EncodePriority>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ff5f 	bl	8000964 <__NVIC_SetPriority>
}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ffb0 	bl	8000a1c <SysTick_Config>
 8000abc:	4603      	mov	r3, r0
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b08b      	sub	sp, #44	; 0x2c
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ada:	e127      	b.n	8000d2c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000adc:	2201      	movs	r2, #1
 8000ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69fa      	ldr	r2, [r7, #28]
 8000aec:	4013      	ands	r3, r2
 8000aee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f040 8116 	bne.w	8000d26 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d034      	beq.n	8000b6c <HAL_GPIO_Init+0xa4>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d80d      	bhi.n	8000b22 <HAL_GPIO_Init+0x5a>
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d02b      	beq.n	8000b62 <HAL_GPIO_Init+0x9a>
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d804      	bhi.n	8000b18 <HAL_GPIO_Init+0x50>
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d031      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d01c      	beq.n	8000b50 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b16:	e048      	b.n	8000baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d043      	beq.n	8000ba4 <HAL_GPIO_Init+0xdc>
 8000b1c:	2b11      	cmp	r3, #17
 8000b1e:	d01b      	beq.n	8000b58 <HAL_GPIO_Init+0x90>
          break;
 8000b20:	e043      	b.n	8000baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b22:	4a89      	ldr	r2, [pc, #548]	; (8000d48 <HAL_GPIO_Init+0x280>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d026      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
 8000b28:	4a87      	ldr	r2, [pc, #540]	; (8000d48 <HAL_GPIO_Init+0x280>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d806      	bhi.n	8000b3c <HAL_GPIO_Init+0x74>
 8000b2e:	4a87      	ldr	r2, [pc, #540]	; (8000d4c <HAL_GPIO_Init+0x284>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d020      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
 8000b34:	4a86      	ldr	r2, [pc, #536]	; (8000d50 <HAL_GPIO_Init+0x288>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d01d      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
          break;
 8000b3a:	e036      	b.n	8000baa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b3c:	4a85      	ldr	r2, [pc, #532]	; (8000d54 <HAL_GPIO_Init+0x28c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d019      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
 8000b42:	4a85      	ldr	r2, [pc, #532]	; (8000d58 <HAL_GPIO_Init+0x290>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d016      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
 8000b48:	4a84      	ldr	r2, [pc, #528]	; (8000d5c <HAL_GPIO_Init+0x294>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d013      	beq.n	8000b76 <HAL_GPIO_Init+0xae>
          break;
 8000b4e:	e02c      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	623b      	str	r3, [r7, #32]
          break;
 8000b56:	e028      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	623b      	str	r3, [r7, #32]
          break;
 8000b60:	e023      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	3308      	adds	r3, #8
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e01e      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	330c      	adds	r3, #12
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e019      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b7e:	2304      	movs	r3, #4
 8000b80:	623b      	str	r3, [r7, #32]
          break;
 8000b82:	e012      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d105      	bne.n	8000b98 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	611a      	str	r2, [r3, #16]
          break;
 8000b96:	e008      	b.n	8000baa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b98:	2308      	movs	r3, #8
 8000b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	615a      	str	r2, [r3, #20]
          break;
 8000ba2:	e002      	b.n	8000baa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
          break;
 8000ba8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000baa:	69bb      	ldr	r3, [r7, #24]
 8000bac:	2bff      	cmp	r3, #255	; 0xff
 8000bae:	d801      	bhi.n	8000bb4 <HAL_GPIO_Init+0xec>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	e001      	b.n	8000bb8 <HAL_GPIO_Init+0xf0>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	2bff      	cmp	r3, #255	; 0xff
 8000bbe:	d802      	bhi.n	8000bc6 <HAL_GPIO_Init+0xfe>
 8000bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	e002      	b.n	8000bcc <HAL_GPIO_Init+0x104>
 8000bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	401a      	ands	r2, r3
 8000bde:	6a39      	ldr	r1, [r7, #32]
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	431a      	orrs	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 8096 	beq.w	8000d26 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfa:	4b59      	ldr	r3, [pc, #356]	; (8000d60 <HAL_GPIO_Init+0x298>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a58      	ldr	r2, [pc, #352]	; (8000d60 <HAL_GPIO_Init+0x298>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <HAL_GPIO_Init+0x298>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c12:	4a54      	ldr	r2, [pc, #336]	; (8000d64 <HAL_GPIO_Init+0x29c>)
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	089b      	lsrs	r3, r3, #2
 8000c18:	3302      	adds	r3, #2
 8000c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	220f      	movs	r2, #15
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4013      	ands	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <HAL_GPIO_Init+0x2a0>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0x19e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a4a      	ldr	r2, [pc, #296]	; (8000d6c <HAL_GPIO_Init+0x2a4>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d00d      	beq.n	8000c62 <HAL_GPIO_Init+0x19a>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a49      	ldr	r2, [pc, #292]	; (8000d70 <HAL_GPIO_Init+0x2a8>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d007      	beq.n	8000c5e <HAL_GPIO_Init+0x196>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a48      	ldr	r2, [pc, #288]	; (8000d74 <HAL_GPIO_Init+0x2ac>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d101      	bne.n	8000c5a <HAL_GPIO_Init+0x192>
 8000c56:	2303      	movs	r3, #3
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x1a0>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e004      	b.n	8000c68 <HAL_GPIO_Init+0x1a0>
 8000c5e:	2302      	movs	r3, #2
 8000c60:	e002      	b.n	8000c68 <HAL_GPIO_Init+0x1a0>
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <HAL_GPIO_Init+0x1a0>
 8000c66:	2300      	movs	r3, #0
 8000c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c6a:	f002 0203 	and.w	r2, r2, #3
 8000c6e:	0092      	lsls	r2, r2, #2
 8000c70:	4093      	lsls	r3, r2
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c78:	493a      	ldr	r1, [pc, #232]	; (8000d64 <HAL_GPIO_Init+0x29c>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	68fa      	ldr	r2, [r7, #12]
 8000c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d006      	beq.n	8000ca0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4938      	ldr	r1, [pc, #224]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	600b      	str	r3, [r1, #0]
 8000c9e:	e006      	b.n	8000cae <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca0:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4933      	ldr	r1, [pc, #204]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000caa:	4013      	ands	r3, r2
 8000cac:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d006      	beq.n	8000cc8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cba:	4b2f      	ldr	r3, [pc, #188]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	492e      	ldr	r1, [pc, #184]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	604b      	str	r3, [r1, #4]
 8000cc6:	e006      	b.n	8000cd6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	4929      	ldr	r1, [pc, #164]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d006      	beq.n	8000cf0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce2:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000ce4:	689a      	ldr	r2, [r3, #8]
 8000ce6:	4924      	ldr	r1, [pc, #144]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	608b      	str	r3, [r1, #8]
 8000cee:	e006      	b.n	8000cfe <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	491f      	ldr	r1, [pc, #124]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d006      	beq.n	8000d18 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	491a      	ldr	r1, [pc, #104]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	60cb      	str	r3, [r1, #12]
 8000d16:	e006      	b.n	8000d26 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d18:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	4915      	ldr	r1, [pc, #84]	; (8000d78 <HAL_GPIO_Init+0x2b0>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	3301      	adds	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d32:	fa22 f303 	lsr.w	r3, r2, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f47f aed0 	bne.w	8000adc <HAL_GPIO_Init+0x14>
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	372c      	adds	r7, #44	; 0x2c
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	10210000 	.word	0x10210000
 8000d4c:	10110000 	.word	0x10110000
 8000d50:	10120000 	.word	0x10120000
 8000d54:	10310000 	.word	0x10310000
 8000d58:	10320000 	.word	0x10320000
 8000d5c:	10220000 	.word	0x10220000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	40010000 	.word	0x40010000
 8000d68:	40010800 	.word	0x40010800
 8000d6c:	40010c00 	.word	0x40010c00
 8000d70:	40011000 	.word	0x40011000
 8000d74:	40011400 	.word	0x40011400
 8000d78:	40010400 	.word	0x40010400

08000d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d002      	beq.n	8000d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3714      	adds	r7, #20
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bc80      	pop	{r7}
 8000da8:	4770      	bx	lr

08000daa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	460b      	mov	r3, r1
 8000db4:	807b      	strh	r3, [r7, #2]
 8000db6:	4613      	mov	r3, r2
 8000db8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dba:	787b      	ldrb	r3, [r7, #1]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc0:	887a      	ldrh	r2, [r7, #2]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc6:	e003      	b.n	8000dd0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	041a      	lsls	r2, r3, #16
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	611a      	str	r2, [r3, #16]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e26c      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8087 	beq.w	8000f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4b8f      	ldr	r3, [pc, #572]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d112      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
 8000e14:	4b8c      	ldr	r3, [pc, #560]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b89      	ldr	r3, [pc, #548]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x12c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d168      	bne.n	8000f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e246      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x76>
 8000e44:	4b80      	ldr	r3, [pc, #512]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a7f      	ldr	r2, [pc, #508]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x98>
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7a      	ldr	r2, [pc, #488]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b78      	ldr	r3, [pc, #480]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a77      	ldr	r2, [pc, #476]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xbc>
 8000e7e:	4b72      	ldr	r3, [pc, #456]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a71      	ldr	r2, [pc, #452]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e98:	4b6b      	ldr	r3, [pc, #428]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b68      	ldr	r3, [pc, #416]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a67      	ldr	r2, [pc, #412]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fcf6 	bl	80008a8 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fcf2 	bl	80008a8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e1fa      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe4>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fce2 	bl	80008a8 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fcde 	bl	80008a8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1e6      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b53      	ldr	r3, [pc, #332]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x10c>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d063      	beq.n	8000fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f16:	4b4c      	ldr	r3, [pc, #304]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f22:	4b49      	ldr	r3, [pc, #292]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
 8000f2e:	4b46      	ldr	r3, [pc, #280]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	4b43      	ldr	r3, [pc, #268]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1ba      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b3d      	ldr	r3, [pc, #244]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4939      	ldr	r1, [pc, #228]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e03a      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f70:	4b36      	ldr	r3, [pc, #216]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fc97 	bl	80008a8 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fc93 	bl	80008a8 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e19b      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	4b2d      	ldr	r3, [pc, #180]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4927      	ldr	r1, [pc, #156]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb2:	4b26      	ldr	r3, [pc, #152]	; (800104c <HAL_RCC_OscConfig+0x270>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc76 	bl	80008a8 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc72 	bl	80008a8 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e17a      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03a      	beq.n	8001060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc56 	bl	80008a8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc52 	bl	80008a8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e15a      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_RCC_OscConfig+0x26c>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 faa8 	bl	8001574 <RCC_Delay>
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_RCC_OscConfig+0x274>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fc3c 	bl	80008a8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001032:	e00f      	b.n	8001054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc38 	bl	80008a8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d908      	bls.n	8001054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e140      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	42420000 	.word	0x42420000
 8001050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b9e      	ldr	r3, [pc, #632]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e9      	bne.n	8001034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a6 	beq.w	80011ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b97      	ldr	r3, [pc, #604]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10d      	bne.n	800109a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b94      	ldr	r3, [pc, #592]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a93      	ldr	r2, [pc, #588]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b91      	ldr	r3, [pc, #580]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001096:	2301      	movs	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d118      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a6:	4b8b      	ldr	r3, [pc, #556]	; (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a8a      	ldr	r2, [pc, #552]	; (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fbf9 	bl	80008a8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ba:	f7ff fbf5 	bl	80008a8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b64      	cmp	r3, #100	; 0x64
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e0fd      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b81      	ldr	r3, [pc, #516]	; (80012d4 <HAL_RCC_OscConfig+0x4f8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x312>
 80010e0:	4b7b      	ldr	r3, [pc, #492]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a7a      	ldr	r2, [pc, #488]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e02d      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x334>
 80010f6:	4b76      	ldr	r3, [pc, #472]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a75      	ldr	r2, [pc, #468]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b73      	ldr	r3, [pc, #460]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a72      	ldr	r2, [pc, #456]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e01c      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10c      	bne.n	8001132 <HAL_RCC_OscConfig+0x356>
 8001118:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a6c      	ldr	r2, [pc, #432]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b6a      	ldr	r3, [pc, #424]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	e00b      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001132:	4b67      	ldr	r3, [pc, #412]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a66      	ldr	r2, [pc, #408]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a63      	ldr	r2, [pc, #396]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d015      	beq.n	800117e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fba9 	bl	80008a8 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fba5 	bl	80008a8 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	; 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0ab      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	4b57      	ldr	r3, [pc, #348]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ee      	beq.n	800115a <HAL_RCC_OscConfig+0x37e>
 800117c:	e014      	b.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fb93 	bl	80008a8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fb8f 	bl	80008a8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	; 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e095      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119c:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ee      	bne.n	8001186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a47      	ldr	r2, [pc, #284]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8081 	beq.w	80012c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d061      	beq.n	8001294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d146      	bne.n	8001266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b3f      	ldr	r3, [pc, #252]	; (80012d8 <HAL_RCC_OscConfig+0x4fc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb63 	bl	80008a8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fb5f 	bl	80008a8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e067      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120c:	d108      	bne.n	8001220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120e:	4b30      	ldr	r3, [pc, #192]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	492d      	ldr	r1, [pc, #180]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a19      	ldr	r1, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001230:	430b      	orrs	r3, r1
 8001232:	4927      	ldr	r1, [pc, #156]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <HAL_RCC_OscConfig+0x4fc>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb33 	bl	80008a8 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb2f 	bl	80008a8 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e037      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x46a>
 8001264:	e02f      	b.n	80012c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <HAL_RCC_OscConfig+0x4fc>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb1c 	bl	80008a8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fb18 	bl	80008a8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e020      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x498>
 8001292:	e018      	b.n	80012c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e013      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d106      	bne.n	80012c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40007000 	.word	0x40007000
 80012d8:	42420060 	.word	0x42420060

080012dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0d0      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f0:	4b6a      	ldr	r3, [pc, #424]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d910      	bls.n	8001320 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f023 0207 	bic.w	r2, r3, #7
 8001306:	4965      	ldr	r1, [pc, #404]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	4313      	orrs	r3, r2
 800130c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	4b63      	ldr	r3, [pc, #396]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0b8      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001338:	4b59      	ldr	r3, [pc, #356]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	4a58      	ldr	r2, [pc, #352]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001342:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001350:	4b53      	ldr	r3, [pc, #332]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800135a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b50      	ldr	r3, [pc, #320]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	494d      	ldr	r1, [pc, #308]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d040      	beq.n	80013fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d115      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e07f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d107      	bne.n	80013aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e073      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013aa:	4b3d      	ldr	r3, [pc, #244]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06b      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f023 0203 	bic.w	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	4936      	ldr	r1, [pc, #216]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013cc:	f7ff fa6c 	bl	80008a8 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d2:	e00a      	b.n	80013ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d4:	f7ff fa68 	bl	80008a8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e053      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ea:	4b2d      	ldr	r3, [pc, #180]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 020c 	and.w	r2, r3, #12
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d1eb      	bne.n	80013d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013fc:	4b27      	ldr	r3, [pc, #156]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	429a      	cmp	r2, r3
 8001408:	d210      	bcs.n	800142c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140a:	4b24      	ldr	r3, [pc, #144]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 0207 	bic.w	r2, r3, #7
 8001412:	4922      	ldr	r1, [pc, #136]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	4313      	orrs	r3, r2
 8001418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b20      	ldr	r3, [pc, #128]	; (800149c <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e032      	b.n	8001492 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4916      	ldr	r1, [pc, #88]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001446:	4313      	orrs	r3, r2
 8001448:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	490e      	ldr	r1, [pc, #56]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146a:	f000 f821 	bl	80014b0 <HAL_RCC_GetSysClockFreq>
 800146e:	4601      	mov	r1, r0
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800147c:	5cd3      	ldrb	r3, [r2, r3]
 800147e:	fa21 f303 	lsr.w	r3, r1, r3
 8001482:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1d0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f9ca 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40022000 	.word	0x40022000
 80014a0:	40021000 	.word	0x40021000
 80014a4:	08001790 	.word	0x08001790
 80014a8:	20000014 	.word	0x20000014
 80014ac:	20000018 	.word	0x20000018

080014b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b0:	b490      	push	{r4, r7}
 80014b2:	b08a      	sub	sp, #40	; 0x28
 80014b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_GetSysClockFreq+0xb0>)
 80014b8:	1d3c      	adds	r4, r7, #4
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x40>
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x46>
 80014ee:	e02d      	b.n	800154c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014f2:	623b      	str	r3, [r7, #32]
      break;
 80014f4:	e02d      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001502:	4413      	add	r3, r2
 8001504:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001508:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	0c5b      	lsrs	r3, r3, #17
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001522:	4413      	add	r3, r2
 8001524:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001528:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 800152e:	fb02 f203 	mul.w	r2, r2, r3
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e004      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	4a0c      	ldr	r2, [pc, #48]	; (8001570 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	623b      	str	r3, [r7, #32]
      break;
 800154a:	e002      	b.n	8001552 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <HAL_RCC_GetSysClockFreq+0xbc>)
 800154e:	623b      	str	r3, [r7, #32]
      break;
 8001550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001552:	6a3b      	ldr	r3, [r7, #32]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3728      	adds	r7, #40	; 0x28
 8001558:	46bd      	mov	sp, r7
 800155a:	bc90      	pop	{r4, r7}
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	0800177c 	.word	0x0800177c
 8001564:	0800178c 	.word	0x0800178c
 8001568:	40021000 	.word	0x40021000
 800156c:	007a1200 	.word	0x007a1200
 8001570:	003d0900 	.word	0x003d0900

08001574 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <RCC_Delay+0x34>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <RCC_Delay+0x38>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a5b      	lsrs	r3, r3, #9
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	fb02 f303 	mul.w	r3, r2, r3
 800158e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001590:	bf00      	nop
  }
  while (Delay --);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1e5a      	subs	r2, r3, #1
 8001596:	60fa      	str	r2, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f9      	bne.n	8001590 <RCC_Delay+0x1c>
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000014 	.word	0x20000014
 80015ac:	10624dd3 	.word	0x10624dd3

080015b0 <__errno>:
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <__errno+0x8>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000020 	.word	0x20000020

080015bc <__libc_init_array>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	2500      	movs	r5, #0
 80015c0:	4e0c      	ldr	r6, [pc, #48]	; (80015f4 <__libc_init_array+0x38>)
 80015c2:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <__libc_init_array+0x3c>)
 80015c4:	1ba4      	subs	r4, r4, r6
 80015c6:	10a4      	asrs	r4, r4, #2
 80015c8:	42a5      	cmp	r5, r4
 80015ca:	d109      	bne.n	80015e0 <__libc_init_array+0x24>
 80015cc:	f000 f8ca 	bl	8001764 <_init>
 80015d0:	2500      	movs	r5, #0
 80015d2:	4e0a      	ldr	r6, [pc, #40]	; (80015fc <__libc_init_array+0x40>)
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <__libc_init_array+0x44>)
 80015d6:	1ba4      	subs	r4, r4, r6
 80015d8:	10a4      	asrs	r4, r4, #2
 80015da:	42a5      	cmp	r5, r4
 80015dc:	d105      	bne.n	80015ea <__libc_init_array+0x2e>
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e4:	4798      	blx	r3
 80015e6:	3501      	adds	r5, #1
 80015e8:	e7ee      	b.n	80015c8 <__libc_init_array+0xc>
 80015ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ee:	4798      	blx	r3
 80015f0:	3501      	adds	r5, #1
 80015f2:	e7f2      	b.n	80015da <__libc_init_array+0x1e>
 80015f4:	080017a0 	.word	0x080017a0
 80015f8:	080017a0 	.word	0x080017a0
 80015fc:	080017a0 	.word	0x080017a0
 8001600:	080017a4 	.word	0x080017a4

08001604 <memset>:
 8001604:	4603      	mov	r3, r0
 8001606:	4402      	add	r2, r0
 8001608:	4293      	cmp	r3, r2
 800160a:	d100      	bne.n	800160e <memset+0xa>
 800160c:	4770      	bx	lr
 800160e:	f803 1b01 	strb.w	r1, [r3], #1
 8001612:	e7f9      	b.n	8001608 <memset+0x4>

08001614 <rand>:
 8001614:	b538      	push	{r3, r4, r5, lr}
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <rand+0x50>)
 8001618:	681c      	ldr	r4, [r3, #0]
 800161a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800161c:	b97b      	cbnz	r3, 800163e <rand+0x2a>
 800161e:	2018      	movs	r0, #24
 8001620:	f000 f82c 	bl	800167c <malloc>
 8001624:	4a10      	ldr	r2, [pc, #64]	; (8001668 <rand+0x54>)
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <rand+0x58>)
 8001628:	63a0      	str	r0, [r4, #56]	; 0x38
 800162a:	e9c0 2300 	strd	r2, r3, [r0]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <rand+0x5c>)
 8001630:	2201      	movs	r2, #1
 8001632:	6083      	str	r3, [r0, #8]
 8001634:	230b      	movs	r3, #11
 8001636:	8183      	strh	r3, [r0, #12]
 8001638:	2300      	movs	r3, #0
 800163a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800163e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001640:	480c      	ldr	r0, [pc, #48]	; (8001674 <rand+0x60>)
 8001642:	690a      	ldr	r2, [r1, #16]
 8001644:	694b      	ldr	r3, [r1, #20]
 8001646:	4350      	muls	r0, r2
 8001648:	4c0b      	ldr	r4, [pc, #44]	; (8001678 <rand+0x64>)
 800164a:	fb04 0003 	mla	r0, r4, r3, r0
 800164e:	fba2 2304 	umull	r2, r3, r2, r4
 8001652:	4403      	add	r3, r0
 8001654:	1c54      	adds	r4, r2, #1
 8001656:	f143 0500 	adc.w	r5, r3, #0
 800165a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800165e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	20000020 	.word	0x20000020
 8001668:	abcd330e 	.word	0xabcd330e
 800166c:	e66d1234 	.word	0xe66d1234
 8001670:	0005deec 	.word	0x0005deec
 8001674:	5851f42d 	.word	0x5851f42d
 8001678:	4c957f2d 	.word	0x4c957f2d

0800167c <malloc>:
 800167c:	4b02      	ldr	r3, [pc, #8]	; (8001688 <malloc+0xc>)
 800167e:	4601      	mov	r1, r0
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	f000 b803 	b.w	800168c <_malloc_r>
 8001686:	bf00      	nop
 8001688:	20000020 	.word	0x20000020

0800168c <_malloc_r>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	1ccd      	adds	r5, r1, #3
 8001690:	f025 0503 	bic.w	r5, r5, #3
 8001694:	3508      	adds	r5, #8
 8001696:	2d0c      	cmp	r5, #12
 8001698:	bf38      	it	cc
 800169a:	250c      	movcc	r5, #12
 800169c:	2d00      	cmp	r5, #0
 800169e:	4606      	mov	r6, r0
 80016a0:	db01      	blt.n	80016a6 <_malloc_r+0x1a>
 80016a2:	42a9      	cmp	r1, r5
 80016a4:	d903      	bls.n	80016ae <_malloc_r+0x22>
 80016a6:	230c      	movs	r3, #12
 80016a8:	6033      	str	r3, [r6, #0]
 80016aa:	2000      	movs	r0, #0
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
 80016ae:	f000 f857 	bl	8001760 <__malloc_lock>
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <_malloc_r+0xac>)
 80016b4:	6814      	ldr	r4, [r2, #0]
 80016b6:	4621      	mov	r1, r4
 80016b8:	b991      	cbnz	r1, 80016e0 <_malloc_r+0x54>
 80016ba:	4c20      	ldr	r4, [pc, #128]	; (800173c <_malloc_r+0xb0>)
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	b91b      	cbnz	r3, 80016c8 <_malloc_r+0x3c>
 80016c0:	4630      	mov	r0, r6
 80016c2:	f000 f83d 	bl	8001740 <_sbrk_r>
 80016c6:	6020      	str	r0, [r4, #0]
 80016c8:	4629      	mov	r1, r5
 80016ca:	4630      	mov	r0, r6
 80016cc:	f000 f838 	bl	8001740 <_sbrk_r>
 80016d0:	1c43      	adds	r3, r0, #1
 80016d2:	d124      	bne.n	800171e <_malloc_r+0x92>
 80016d4:	230c      	movs	r3, #12
 80016d6:	4630      	mov	r0, r6
 80016d8:	6033      	str	r3, [r6, #0]
 80016da:	f000 f842 	bl	8001762 <__malloc_unlock>
 80016de:	e7e4      	b.n	80016aa <_malloc_r+0x1e>
 80016e0:	680b      	ldr	r3, [r1, #0]
 80016e2:	1b5b      	subs	r3, r3, r5
 80016e4:	d418      	bmi.n	8001718 <_malloc_r+0x8c>
 80016e6:	2b0b      	cmp	r3, #11
 80016e8:	d90f      	bls.n	800170a <_malloc_r+0x7e>
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	18cc      	adds	r4, r1, r3
 80016ee:	50cd      	str	r5, [r1, r3]
 80016f0:	4630      	mov	r0, r6
 80016f2:	f000 f836 	bl	8001762 <__malloc_unlock>
 80016f6:	f104 000b 	add.w	r0, r4, #11
 80016fa:	1d23      	adds	r3, r4, #4
 80016fc:	f020 0007 	bic.w	r0, r0, #7
 8001700:	1ac3      	subs	r3, r0, r3
 8001702:	d0d3      	beq.n	80016ac <_malloc_r+0x20>
 8001704:	425a      	negs	r2, r3
 8001706:	50e2      	str	r2, [r4, r3]
 8001708:	e7d0      	b.n	80016ac <_malloc_r+0x20>
 800170a:	684b      	ldr	r3, [r1, #4]
 800170c:	428c      	cmp	r4, r1
 800170e:	bf16      	itet	ne
 8001710:	6063      	strne	r3, [r4, #4]
 8001712:	6013      	streq	r3, [r2, #0]
 8001714:	460c      	movne	r4, r1
 8001716:	e7eb      	b.n	80016f0 <_malloc_r+0x64>
 8001718:	460c      	mov	r4, r1
 800171a:	6849      	ldr	r1, [r1, #4]
 800171c:	e7cc      	b.n	80016b8 <_malloc_r+0x2c>
 800171e:	1cc4      	adds	r4, r0, #3
 8001720:	f024 0403 	bic.w	r4, r4, #3
 8001724:	42a0      	cmp	r0, r4
 8001726:	d005      	beq.n	8001734 <_malloc_r+0xa8>
 8001728:	1a21      	subs	r1, r4, r0
 800172a:	4630      	mov	r0, r6
 800172c:	f000 f808 	bl	8001740 <_sbrk_r>
 8001730:	3001      	adds	r0, #1
 8001732:	d0cf      	beq.n	80016d4 <_malloc_r+0x48>
 8001734:	6025      	str	r5, [r4, #0]
 8001736:	e7db      	b.n	80016f0 <_malloc_r+0x64>
 8001738:	20000134 	.word	0x20000134
 800173c:	20000138 	.word	0x20000138

08001740 <_sbrk_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	2300      	movs	r3, #0
 8001744:	4c05      	ldr	r4, [pc, #20]	; (800175c <_sbrk_r+0x1c>)
 8001746:	4605      	mov	r5, r0
 8001748:	4608      	mov	r0, r1
 800174a:	6023      	str	r3, [r4, #0]
 800174c:	f7fe fff2 	bl	8000734 <_sbrk>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d102      	bne.n	800175a <_sbrk_r+0x1a>
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	b103      	cbz	r3, 800175a <_sbrk_r+0x1a>
 8001758:	602b      	str	r3, [r5, #0]
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	20000140 	.word	0x20000140

08001760 <__malloc_lock>:
 8001760:	4770      	bx	lr

08001762 <__malloc_unlock>:
 8001762:	4770      	bx	lr

08001764 <_init>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr

08001770 <_fini>:
 8001770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001772:	bf00      	nop
 8001774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001776:	bc08      	pop	{r3}
 8001778:	469e      	mov	lr, r3
 800177a:	4770      	bx	lr
