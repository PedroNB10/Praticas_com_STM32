
Genius_stm32_1.5_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d4  080018d4  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080018d4  080018d4  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018d4  080018d4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d4  080018d4  000118d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018d8  080018d8  000118d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080018dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000084  08001960  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08001960  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003901  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f73  00000000  00000000  000239ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000410  00000000  00000000  00024928  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000378  00000000  00000000  00024d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015bb0  00000000  00000000  000250b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041fa  00000000  00000000  0003ac60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007da4a  00000000  00000000  0003ee5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc8a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f70  00000000  00000000  000bc920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08001898 	.word	0x08001898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08001898 	.word	0x08001898

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbfb 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f88f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8c9 	bl	80002f0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
//Inicialização

  PiscaLeds();
 800015e:	f000 f921 	bl	80003a4 <PiscaLeds>
	  	  //BOTAO VERDE: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1   BOTAO 2
	  	  //BOTAO AMARELO: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1  BOTAO 3

	  //BOTAO CINZA(BOTAO INICIAR): HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1  BOTAO 4

	  while(botao_iniciar_apertado == false ){
 8000162:	e04a      	b.n	80001fa <main+0xae>


	     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1){
 8000164:	2108      	movs	r1, #8
 8000166:	483c      	ldr	r0, [pc, #240]	; (8000258 <main+0x10c>)
 8000168:	f000 feb2 	bl	8000ed0 <HAL_GPIO_ReadPin>
 800016c:	4603      	mov	r3, r0
 800016e:	2b01      	cmp	r3, #1
 8000170:	d143      	bne.n	80001fa <main+0xae>
	       botao_iniciar_apertado = true;
 8000172:	4b3a      	ldr	r3, [pc, #232]	; (800025c <main+0x110>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	4a3a      	ldr	r2, [pc, #232]	; (8000260 <main+0x114>)
 8000178:	6013      	str	r3, [r2, #0]
	       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000180:	4835      	ldr	r0, [pc, #212]	; (8000258 <main+0x10c>)
 8000182:	f000 febc 	bl	8000efe <HAL_GPIO_WritePin>
	       HAL_Delay(100);
 8000186:	2064      	movs	r0, #100	; 0x64
 8000188:	f000 fc42 	bl	8000a10 <HAL_Delay>
	       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000192:	4831      	ldr	r0, [pc, #196]	; (8000258 <main+0x10c>)
 8000194:	f000 feb3 	bl	8000efe <HAL_GPIO_WritePin>


	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800019e:	482e      	ldr	r0, [pc, #184]	; (8000258 <main+0x10c>)
 80001a0:	f000 fead 	bl	8000efe <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 80001a4:	2064      	movs	r0, #100	; 0x64
 80001a6:	f000 fc33 	bl	8000a10 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001b0:	4829      	ldr	r0, [pc, #164]	; (8000258 <main+0x10c>)
 80001b2:	f000 fea4 	bl	8000efe <HAL_GPIO_WritePin>


	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 80001b6:	2201      	movs	r2, #1
 80001b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001bc:	4826      	ldr	r0, [pc, #152]	; (8000258 <main+0x10c>)
 80001be:	f000 fe9e 	bl	8000efe <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 80001c2:	2064      	movs	r0, #100	; 0x64
 80001c4:	f000 fc24 	bl	8000a10 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ce:	4822      	ldr	r0, [pc, #136]	; (8000258 <main+0x10c>)
 80001d0:	f000 fe95 	bl	8000efe <HAL_GPIO_WritePin>


	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001da:	481f      	ldr	r0, [pc, #124]	; (8000258 <main+0x10c>)
 80001dc:	f000 fe8f 	bl	8000efe <HAL_GPIO_WritePin>
	        HAL_Delay(100);
 80001e0:	2064      	movs	r0, #100	; 0x64
 80001e2:	f000 fc15 	bl	8000a10 <HAL_Delay>
	        HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ec:	481a      	ldr	r0, [pc, #104]	; (8000258 <main+0x10c>)
 80001ee:	f000 fe86 	bl	8000efe <HAL_GPIO_WritePin>
	        HAL_Delay(1000);
 80001f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001f6:	f000 fc0b 	bl	8000a10 <HAL_Delay>
	  while(botao_iniciar_apertado == false ){
 80001fa:	4b19      	ldr	r3, [pc, #100]	; (8000260 <main+0x114>)
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b19      	ldr	r3, [pc, #100]	; (8000264 <main+0x118>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	429a      	cmp	r2, r3
 8000204:	d0ae      	beq.n	8000164 <main+0x18>

	     }
	   }

	  	  	proximaRodada();
 8000206:	f000 f913 	bl	8000430 <proximaRodada>
	 	    reproduzirSequencia();
 800020a:	f000 f933 	bl	8000474 <reproduzirSequencia>
	 	    aguardarJogador();
 800020e:	f000 f9c7 	bl	80005a0 <aguardarJogador>
	 	    // estrutura usada para reiniciar todas as variáveis (novo jogo)
	 	    if (game_over == true) {
 8000212:	4b15      	ldr	r3, [pc, #84]	; (8000268 <main+0x11c>)
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	4b11      	ldr	r3, [pc, #68]	; (800025c <main+0x110>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	429a      	cmp	r2, r3
 800021c:	d117      	bne.n	800024e <main+0x102>
	 	    	for(int i=0;i<32;i++)
 800021e:	2300      	movs	r3, #0
 8000220:	607b      	str	r3, [r7, #4]
 8000222:	e007      	b.n	8000234 <main+0xe8>
	 	    			sequencia[i] = 0; // caso comentar, não dá erros
 8000224:	4a11      	ldr	r2, [pc, #68]	; (800026c <main+0x120>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2100      	movs	r1, #0
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	    	for(int i=0;i<32;i++)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3301      	adds	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b1f      	cmp	r3, #31
 8000238:	ddf4      	ble.n	8000224 <main+0xd8>
	 	      rodada = 0;
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <main+0x124>)
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
	 	      passo = 0;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <main+0x128>)
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
	 	      game_over = false;
 8000246:	4b07      	ldr	r3, [pc, #28]	; (8000264 <main+0x118>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a07      	ldr	r2, [pc, #28]	; (8000268 <main+0x11c>)
 800024c:	6013      	str	r3, [r2, #0]
	 	    }
	 	    HAL_Delay(1000);
 800024e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000252:	f000 fbdd 	bl	8000a10 <HAL_Delay>
	  while(botao_iniciar_apertado == false ){
 8000256:	e7d0      	b.n	80001fa <main+0xae>
 8000258:	40010800 	.word	0x40010800
 800025c:	20000010 	.word	0x20000010
 8000260:	20000130 	.word	0x20000130
 8000264:	20000128 	.word	0x20000128
 8000268:	2000012c 	.word	0x2000012c
 800026c:	200000a0 	.word	0x200000a0
 8000270:	20000120 	.word	0x20000120
 8000274:	20000124 	.word	0x20000124

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fa66 	bl	8001758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029a:	2302      	movs	r3, #2
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029e:	2301      	movs	r3, #1
 80002a0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a2:	2310      	movs	r3, #16
 80002a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002a6:	2300      	movs	r3, #0
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002aa:	f107 0318 	add.w	r3, r7, #24
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fe3e 	bl	8000f30 <HAL_RCC_OscConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002ba:	f000 fa87 	bl	80007cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002be:	230f      	movs	r3, #15
 80002c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c2:	2300      	movs	r3, #0
 80002c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2100      	movs	r1, #0
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f8aa 	bl	8001430 <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e2:	f000 fa73 	bl	80007cc <Error_Handler>
  }
}
 80002e6:	bf00      	nop
 80002e8:	3740      	adds	r7, #64	; 0x40
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f6:	f107 0308 	add.w	r3, r7, #8
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000304:	4b24      	ldr	r3, [pc, #144]	; (8000398 <MX_GPIO_Init+0xa8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a23      	ldr	r2, [pc, #140]	; (8000398 <MX_GPIO_Init+0xa8>)
 800030a:	f043 0304 	orr.w	r3, r3, #4
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b21      	ldr	r3, [pc, #132]	; (8000398 <MX_GPIO_Init+0xa8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0304 	and.w	r3, r3, #4
 8000318:	607b      	str	r3, [r7, #4]
 800031a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031c:	4b1e      	ldr	r3, [pc, #120]	; (8000398 <MX_GPIO_Init+0xa8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a1d      	ldr	r2, [pc, #116]	; (8000398 <MX_GPIO_Init+0xa8>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_GPIO_Init+0xa8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0308 	and.w	r3, r3, #8
 8000330:	603b      	str	r3, [r7, #0]
 8000332:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 800033a:	4818      	ldr	r0, [pc, #96]	; (800039c <MX_GPIO_Init+0xac>)
 800033c:	f000 fddf 	bl	8000efe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000340:	2308      	movs	r3, #8
 8000342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000344:	2300      	movs	r3, #0
 8000346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000348:	2302      	movs	r3, #2
 800034a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4619      	mov	r1, r3
 8000352:	4812      	ldr	r0, [pc, #72]	; (800039c <MX_GPIO_Init+0xac>)
 8000354:	f000 fc62 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000358:	f640 4303 	movw	r3, #3075	; 0xc03
 800035c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035e:	2300      	movs	r3, #0
 8000360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000362:	2302      	movs	r3, #2
 8000364:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	4619      	mov	r1, r3
 800036c:	480c      	ldr	r0, [pc, #48]	; (80003a0 <MX_GPIO_Init+0xb0>)
 800036e:	f000 fc55 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000372:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000376:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2302      	movs	r3, #2
 8000382:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	f107 0308 	add.w	r3, r7, #8
 8000388:	4619      	mov	r1, r3
 800038a:	4804      	ldr	r0, [pc, #16]	; (800039c <MX_GPIO_Init+0xac>)
 800038c:	f000 fc46 	bl	8000c1c <HAL_GPIO_Init>

}
 8000390:	bf00      	nop
 8000392:	3718      	adds	r7, #24
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	40021000 	.word	0x40021000
 800039c:	40010800 	.word	0x40010800
 80003a0:	40010c00 	.word	0x40010c00

080003a4 <PiscaLeds>:

/* USER CODE BEGIN 4 */
//insrindo funções inicio

void PiscaLeds() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0

  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 80003a8:	2201      	movs	r2, #1
 80003aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003ae:	481f      	ldr	r0, [pc, #124]	; (800042c <PiscaLeds+0x88>)
 80003b0:	f000 fda5 	bl	8000efe <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80003b4:	2064      	movs	r0, #100	; 0x64
 80003b6:	f000 fb2b 	bl	8000a10 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c0:	481a      	ldr	r0, [pc, #104]	; (800042c <PiscaLeds+0x88>)
 80003c2:	f000 fd9c 	bl	8000efe <HAL_GPIO_WritePin>


   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 80003c6:	2201      	movs	r2, #1
 80003c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <PiscaLeds+0x88>)
 80003ce:	f000 fd96 	bl	8000efe <HAL_GPIO_WritePin>
   HAL_Delay(100);
 80003d2:	2064      	movs	r0, #100	; 0x64
 80003d4:	f000 fb1c 	bl	8000a10 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003de:	4813      	ldr	r0, [pc, #76]	; (800042c <PiscaLeds+0x88>)
 80003e0:	f000 fd8d 	bl	8000efe <HAL_GPIO_WritePin>


   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <PiscaLeds+0x88>)
 80003ec:	f000 fd87 	bl	8000efe <HAL_GPIO_WritePin>
   HAL_Delay(100);
 80003f0:	2064      	movs	r0, #100	; 0x64
 80003f2:	f000 fb0d 	bl	8000a10 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fc:	480b      	ldr	r0, [pc, #44]	; (800042c <PiscaLeds+0x88>)
 80003fe:	f000 fd7e 	bl	8000efe <HAL_GPIO_WritePin>


   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 8000402:	2201      	movs	r2, #1
 8000404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000408:	4808      	ldr	r0, [pc, #32]	; (800042c <PiscaLeds+0x88>)
 800040a:	f000 fd78 	bl	8000efe <HAL_GPIO_WritePin>
   HAL_Delay(100);
 800040e:	2064      	movs	r0, #100	; 0x64
 8000410:	f000 fafe 	bl	8000a10 <HAL_Delay>
   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	4804      	ldr	r0, [pc, #16]	; (800042c <PiscaLeds+0x88>)
 800041c:	f000 fd6f 	bl	8000efe <HAL_GPIO_WritePin>
   HAL_Delay(100);
 8000420:	2064      	movs	r0, #100	; 0x64
 8000422:	f000 faf5 	bl	8000a10 <HAL_Delay>
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800

08000430 <proximaRodada>:


void proximaRodada() {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0

  int sorteio = srand()%4; //comando correto:  int sorteio = random(4);
 8000436:	f001 f997 	bl	8001768 <srand>
 800043a:	4603      	mov	r3, r0
 800043c:	425a      	negs	r2, r3
 800043e:	f003 0303 	and.w	r3, r3, #3
 8000442:	f002 0203 	and.w	r2, r2, #3
 8000446:	bf58      	it	pl
 8000448:	4253      	negpl	r3, r2
 800044a:	607b      	str	r3, [r7, #4]


  sequencia[rodada] = sorteio;
 800044c:	4b07      	ldr	r3, [pc, #28]	; (800046c <proximaRodada+0x3c>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <proximaRodada+0x40>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  rodada = rodada + 1;
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <proximaRodada+0x3c>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	4a03      	ldr	r2, [pc, #12]	; (800046c <proximaRodada+0x3c>)
 8000460:	6013      	str	r3, [r2, #0]
  //Serial.print(sorteio);
}
 8000462:	bf00      	nop
 8000464:	3708      	adds	r7, #8
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20000120 	.word	0x20000120
 8000470:	200000a0 	.word	0x200000a0

08000474 <reproduzirSequencia>:

void reproduzirSequencia() {
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
  for (int i = 0; i < rodada; i++) {
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	e07d      	b.n	800057c <reproduzirSequencia+0x108>

        if(leds[sequencia[i]] == leds[0]){// 8 é o pino
 8000480:	4a43      	ldr	r2, [pc, #268]	; (8000590 <reproduzirSequencia+0x11c>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000488:	4a42      	ldr	r2, [pc, #264]	; (8000594 <reproduzirSequencia+0x120>)
 800048a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800048e:	4b41      	ldr	r3, [pc, #260]	; (8000594 <reproduzirSequencia+0x120>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	d113      	bne.n	80004be <reproduzirSequencia+0x4a>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 8000496:	2201      	movs	r2, #1
 8000498:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800049c:	483e      	ldr	r0, [pc, #248]	; (8000598 <reproduzirSequencia+0x124>)
 800049e:	f000 fd2e 	bl	8000efe <HAL_GPIO_WritePin>
            HAL_Delay(500);
 80004a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a6:	f000 fab3 	bl	8000a10 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b0:	4839      	ldr	r0, [pc, #228]	; (8000598 <reproduzirSequencia+0x124>)
 80004b2:	f000 fd24 	bl	8000efe <HAL_GPIO_WritePin>
            HAL_Delay(100);
 80004b6:	2064      	movs	r0, #100	; 0x64
 80004b8:	f000 faaa 	bl	8000a10 <HAL_Delay>
 80004bc:	e05b      	b.n	8000576 <reproduzirSequencia+0x102>
          }

      else  if(leds[sequencia[i]] == leds[1]){
 80004be:	4a34      	ldr	r2, [pc, #208]	; (8000590 <reproduzirSequencia+0x11c>)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c6:	4a33      	ldr	r2, [pc, #204]	; (8000594 <reproduzirSequencia+0x120>)
 80004c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004cc:	4b31      	ldr	r3, [pc, #196]	; (8000594 <reproduzirSequencia+0x120>)
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d113      	bne.n	80004fc <reproduzirSequencia+0x88>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004da:	482f      	ldr	r0, [pc, #188]	; (8000598 <reproduzirSequencia+0x124>)
 80004dc:	f000 fd0f 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(500);
 80004e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004e4:	f000 fa94 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ee:	482a      	ldr	r0, [pc, #168]	; (8000598 <reproduzirSequencia+0x124>)
 80004f0:	f000 fd05 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 fa8b 	bl	8000a10 <HAL_Delay>
 80004fa:	e03c      	b.n	8000576 <reproduzirSequencia+0x102>
        }

      else  if(leds[sequencia[i]] == leds[2]){
 80004fc:	4a24      	ldr	r2, [pc, #144]	; (8000590 <reproduzirSequencia+0x11c>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000504:	4a23      	ldr	r2, [pc, #140]	; (8000594 <reproduzirSequencia+0x120>)
 8000506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050a:	4b22      	ldr	r3, [pc, #136]	; (8000594 <reproduzirSequencia+0x120>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	429a      	cmp	r2, r3
 8000510:	d113      	bne.n	800053a <reproduzirSequencia+0xc6>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000512:	2201      	movs	r2, #1
 8000514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000518:	481f      	ldr	r0, [pc, #124]	; (8000598 <reproduzirSequencia+0x124>)
 800051a:	f000 fcf0 	bl	8000efe <HAL_GPIO_WritePin>
      HAL_Delay(500);
 800051e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000522:	f000 fa75 	bl	8000a10 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052c:	481a      	ldr	r0, [pc, #104]	; (8000598 <reproduzirSequencia+0x124>)
 800052e:	f000 fce6 	bl	8000efe <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f000 fa6c 	bl	8000a10 <HAL_Delay>
 8000538:	e01d      	b.n	8000576 <reproduzirSequencia+0x102>
    }

      else  if(leds[sequencia[i]] == leds[3]){
 800053a:	4a15      	ldr	r2, [pc, #84]	; (8000590 <reproduzirSequencia+0x11c>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <reproduzirSequencia+0x120>)
 8000544:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <reproduzirSequencia+0x120>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	429a      	cmp	r2, r3
 800054e:	d112      	bne.n	8000576 <reproduzirSequencia+0x102>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000556:	4810      	ldr	r0, [pc, #64]	; (8000598 <reproduzirSequencia+0x124>)
 8000558:	f000 fcd1 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000560:	f000 fa56 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <reproduzirSequencia+0x124>)
 800056c:	f000 fcc7 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8000570:	2064      	movs	r0, #100	; 0x64
 8000572:	f000 fa4d 	bl	8000a10 <HAL_Delay>
  for (int i = 0; i < rodada; i++) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	3301      	adds	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <reproduzirSequencia+0x128>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	f6ff af7c 	blt.w	8000480 <reproduzirSequencia+0xc>
        }


  }
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000a0 	.word	0x200000a0
 8000594:	20000000 	.word	0x20000000
 8000598:	40010800 	.word	0x40010800
 800059c:	20000120 	.word	0x20000120

080005a0 <aguardarJogador>:

void aguardarJogador() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
  int botao_pressionado = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < rodada; i++) {
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
 80005ae:	e0f0      	b.n	8000792 <aguardarJogador+0x1f2>
     int jogada_efetuada = false;
 80005b0:	4b7e      	ldr	r3, [pc, #504]	; (80007ac <aguardarJogador+0x20c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
    while (jogada_efetuada == false) {
 80005b6:	e07d      	b.n	80006b4 <aguardarJogador+0x114>
      for (int i = 0; i <= 3; i++) {
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	e077      	b.n	80006ae <aguardarJogador+0x10e>
         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1) {
 80005be:	2101      	movs	r1, #1
 80005c0:	487b      	ldr	r0, [pc, #492]	; (80007b0 <aguardarJogador+0x210>)
 80005c2:	f000 fc85 	bl	8000ed0 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d115      	bne.n	80005f8 <aguardarJogador+0x58>
          botao_pressionado = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d6:	4877      	ldr	r0, [pc, #476]	; (80007b4 <aguardarJogador+0x214>)
 80005d8:	f000 fc91 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80005dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005e0:	f000 fa16 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ea:	4872      	ldr	r0, [pc, #456]	; (80007b4 <aguardarJogador+0x214>)
 80005ec:	f000 fc87 	bl	8000efe <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 80005f0:	4b71      	ldr	r3, [pc, #452]	; (80007b8 <aguardarJogador+0x218>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e057      	b.n	80006a8 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1) {
 80005f8:	2102      	movs	r1, #2
 80005fa:	486d      	ldr	r0, [pc, #436]	; (80007b0 <aguardarJogador+0x210>)
 80005fc:	f000 fc68 	bl	8000ed0 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d115      	bne.n	8000632 <aguardarJogador+0x92>
          botao_pressionado = 1;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000610:	4868      	ldr	r0, [pc, #416]	; (80007b4 <aguardarJogador+0x214>)
 8000612:	f000 fc74 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(300);
 8000616:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800061a:	f000 f9f9 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000624:	4863      	ldr	r0, [pc, #396]	; (80007b4 <aguardarJogador+0x214>)
 8000626:	f000 fc6a 	bl	8000efe <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <aguardarJogador+0x218>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	e03a      	b.n	80006a8 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
 8000632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000636:	485e      	ldr	r0, [pc, #376]	; (80007b0 <aguardarJogador+0x210>)
 8000638:	f000 fc4a 	bl	8000ed0 <HAL_GPIO_ReadPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d115      	bne.n	800066e <aguardarJogador+0xce>
          botao_pressionado = 2;
 8000642:	2302      	movs	r3, #2
 8000644:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000646:	2201      	movs	r2, #1
 8000648:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064c:	4859      	ldr	r0, [pc, #356]	; (80007b4 <aguardarJogador+0x214>)
 800064e:	f000 fc56 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(300);
 8000652:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000656:	f000 f9db 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000660:	4854      	ldr	r0, [pc, #336]	; (80007b4 <aguardarJogador+0x214>)
 8000662:	f000 fc4c 	bl	8000efe <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 8000666:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <aguardarJogador+0x218>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	e01c      	b.n	80006a8 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	484f      	ldr	r0, [pc, #316]	; (80007b0 <aguardarJogador+0x210>)
 8000674:	f000 fc2c 	bl	8000ed0 <HAL_GPIO_ReadPin>
 8000678:	4603      	mov	r3, r0
 800067a:	2b01      	cmp	r3, #1
 800067c:	d114      	bne.n	80006a8 <aguardarJogador+0x108>
          botao_pressionado = 3;
 800067e:	2303      	movs	r3, #3
 8000680:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000688:	484a      	ldr	r0, [pc, #296]	; (80007b4 <aguardarJogador+0x214>)
 800068a:	f000 fc38 	bl	8000efe <HAL_GPIO_WritePin>
          HAL_Delay(300);
 800068e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000692:	f000 f9bd 	bl	8000a10 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069c:	4845      	ldr	r0, [pc, #276]	; (80007b4 <aguardarJogador+0x214>)
 800069e:	f000 fc2e 	bl	8000efe <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 80006a2:	4b45      	ldr	r3, [pc, #276]	; (80007b8 <aguardarJogador+0x218>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	60fb      	str	r3, [r7, #12]
      for (int i = 0; i <= 3; i++) {
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	dd84      	ble.n	80005be <aguardarJogador+0x1e>
    while (jogada_efetuada == false) {
 80006b4:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <aguardarJogador+0x20c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	f43f af7c 	beq.w	80005b8 <aguardarJogador+0x18>


      }
    }
    //verificar a jogada
    if (sequencia[passo] != botao_pressionado) {
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <aguardarJogador+0x21c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a3e      	ldr	r2, [pc, #248]	; (80007c0 <aguardarJogador+0x220>)
 80006c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ca:	697a      	ldr	r2, [r7, #20]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d058      	beq.n	8000782 <aguardarJogador+0x1e2>
      //efeito luminoso/sonoro indicando que o jogador perdeu
      for (int i = 0; i <= 3; i++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	e04d      	b.n	8000772 <aguardarJogador+0x1d2>


            if(i == 0){
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <aguardarJogador+0x15c>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e2:	4834      	ldr	r0, [pc, #208]	; (80007b4 <aguardarJogador+0x214>)
 80006e4:	f000 fc0b 	bl	8000efe <HAL_GPIO_WritePin>
              HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	; 0x64
 80006ea:	f000 f991 	bl	8000a10 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f4:	482f      	ldr	r0, [pc, #188]	; (80007b4 <aguardarJogador+0x214>)
 80006f6:	f000 fc02 	bl	8000efe <HAL_GPIO_WritePin>
 80006fa:	e037      	b.n	800076c <aguardarJogador+0x1cc>
              }

            else if(i == 1){
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d10f      	bne.n	8000722 <aguardarJogador+0x182>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	482a      	ldr	r0, [pc, #168]	; (80007b4 <aguardarJogador+0x214>)
 800070a:	f000 fbf8 	bl	8000efe <HAL_GPIO_WritePin>
              HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	; 0x64
 8000710:	f000 f97e 	bl	8000a10 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 8000714:	2200      	movs	r2, #0
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	4826      	ldr	r0, [pc, #152]	; (80007b4 <aguardarJogador+0x214>)
 800071c:	f000 fbef 	bl	8000efe <HAL_GPIO_WritePin>
 8000720:	e024      	b.n	800076c <aguardarJogador+0x1cc>
              }

            else if(i == 2){
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d10f      	bne.n	8000748 <aguardarJogador+0x1a8>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4821      	ldr	r0, [pc, #132]	; (80007b4 <aguardarJogador+0x214>)
 8000730:	f000 fbe5 	bl	8000efe <HAL_GPIO_WritePin>
              HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f000 f96b 	bl	8000a10 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000740:	481c      	ldr	r0, [pc, #112]	; (80007b4 <aguardarJogador+0x214>)
 8000742:	f000 fbdc 	bl	8000efe <HAL_GPIO_WritePin>
 8000746:	e011      	b.n	800076c <aguardarJogador+0x1cc>
              }

            else if(i == 3){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b03      	cmp	r3, #3
 800074c:	d10e      	bne.n	800076c <aguardarJogador+0x1cc>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000754:	4817      	ldr	r0, [pc, #92]	; (80007b4 <aguardarJogador+0x214>)
 8000756:	f000 fbd2 	bl	8000efe <HAL_GPIO_WritePin>
              HAL_Delay(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f000 f958 	bl	8000a10 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4813      	ldr	r0, [pc, #76]	; (80007b4 <aguardarJogador+0x214>)
 8000768:	f000 fbc9 	bl	8000efe <HAL_GPIO_WritePin>
      for (int i = 0; i <= 3; i++) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b03      	cmp	r3, #3
 8000776:	ddae      	ble.n	80006d6 <aguardarJogador+0x136>
          }



      }
      game_over = true;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <aguardarJogador+0x218>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <aguardarJogador+0x224>)
 800077e:	6013      	str	r3, [r2, #0]
      break;
 8000780:	e00d      	b.n	800079e <aguardarJogador+0x1fe>
    }
    passo = passo + 1;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <aguardarJogador+0x21c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3301      	adds	r3, #1
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <aguardarJogador+0x21c>)
 800078a:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < rodada; i++) {
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	3301      	adds	r3, #1
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <aguardarJogador+0x228>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	693a      	ldr	r2, [r7, #16]
 8000798:	429a      	cmp	r2, r3
 800079a:	f6ff af09 	blt.w	80005b0 <aguardarJogador+0x10>
  }
  passo = 0;
 800079e:	4b07      	ldr	r3, [pc, #28]	; (80007bc <aguardarJogador+0x21c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	bf00      	nop
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000128 	.word	0x20000128
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	40010800 	.word	0x40010800
 80007b8:	20000010 	.word	0x20000010
 80007bc:	20000124 	.word	0x20000124
 80007c0:	200000a0 	.word	0x200000a0
 80007c4:	2000012c 	.word	0x2000012c
 80007c8:	20000120 	.word	0x20000120

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <Error_Handler+0x6>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b085      	sub	sp, #20
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a14      	ldr	r2, [pc, #80]	; (8000830 <HAL_MspInit+0x5c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_MspInit+0x5c>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	4a0e      	ldr	r2, [pc, #56]	; (8000830 <HAL_MspInit+0x5c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	61d3      	str	r3, [r2, #28]
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <HAL_MspInit+0x5c>)
 8000800:	69db      	ldr	r3, [r3, #28]
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800080a:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <HAL_MspInit+0x60>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_MspInit+0x60>)
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40021000 	.word	0x40021000
 8000834:	40010000 	.word	0x40010000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr

0800087a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087e:	f000 f8ab 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000890:	4a14      	ldr	r2, [pc, #80]	; (80008e4 <_sbrk+0x5c>)
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <_sbrk+0x60>)
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_sbrk+0x64>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <_sbrk+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	693a      	ldr	r2, [r7, #16]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d207      	bcs.n	80008c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008b8:	f000 ff24 	bl	8001704 <__errno>
 80008bc:	4602      	mov	r2, r0
 80008be:	230c      	movs	r3, #12
 80008c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	e009      	b.n	80008dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <_sbrk+0x64>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <_sbrk+0x64>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a05      	ldr	r2, [pc, #20]	; (80008ec <_sbrk+0x64>)
 80008d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3718      	adds	r7, #24
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20005000 	.word	0x20005000
 80008e8:	00000400 	.word	0x00000400
 80008ec:	20000134 	.word	0x20000134
 80008f0:	20000148 	.word	0x20000148

080008f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr

08000900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000926:	f7ff ffe5 	bl	80008f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092a:	f000 fef1 	bl	8001710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092e:	f7ff fc0d 	bl	800014c <main>
  bx lr
 8000932:	4770      	bx	lr
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800093c:	080018dc 	.word	0x080018dc
  ldr r2, =_sbss
 8000940:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000944:	20000148 	.word	0x20000148

08000948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_2_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_Init+0x28>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_Init+0x28>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f929 	bl	8000bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f808 	bl	8000978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000968:	f7ff ff34 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40022000 	.word	0x40022000

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x54>)
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x58>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4619      	mov	r1, r3
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000992:	fbb2 f3f3 	udiv	r3, r2, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f933 	bl	8000c02 <HAL_SYSTICK_Config>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00e      	b.n	80009c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d80a      	bhi.n	80009c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ac:	2200      	movs	r2, #0
 80009ae:	6879      	ldr	r1, [r7, #4]
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f000 f909 	bl	8000bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b8:	4a06      	ldr	r2, [pc, #24]	; (80009d4 <HAL_InitTick+0x5c>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	e000      	b.n	80009c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000014 	.word	0x20000014
 80009d0:	2000001c 	.word	0x2000001c
 80009d4:	20000018 	.word	0x20000018

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	2000001c 	.word	0x2000001c
 80009f8:	20000140 	.word	0x20000140

080009fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	20000140 	.word	0x20000140

08000a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a18:	f7ff fff0 	bl	80009fc <HAL_GetTick>
 8000a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a28:	d005      	beq.n	8000a36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_Delay+0x40>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	4413      	add	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a36:	bf00      	nop
 8000a38:	f7ff ffe0 	bl	80009fc <HAL_GetTick>
 8000a3c:	4602      	mov	r2, r0
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d8f7      	bhi.n	8000a38 <HAL_Delay+0x28>
  {
  }
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000001c 	.word	0x2000001c

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b80:	d301      	bcc.n	8000b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00f      	b.n	8000ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <SysTick_Config+0x40>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b8e:	210f      	movs	r1, #15
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f7ff ff90 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <SysTick_Config+0x40>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <SysTick_Config+0x40>)
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010

08000bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff49 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bc2:	bf00      	nop
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
 8000bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bdc:	f7ff ff5e 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	68b9      	ldr	r1, [r7, #8]
 8000be6:	6978      	ldr	r0, [r7, #20]
 8000be8:	f7ff ff90 	bl	8000b0c <NVIC_EncodePriority>
 8000bec:	4602      	mov	r2, r0
 8000bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff5f 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfa:	bf00      	nop
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ffb0 	bl	8000b70 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b08b      	sub	sp, #44	; 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e127      	b.n	8000e80 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8116 	bne.w	8000e7a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	2b12      	cmp	r3, #18
 8000c54:	d034      	beq.n	8000cc0 <HAL_GPIO_Init+0xa4>
 8000c56:	2b12      	cmp	r3, #18
 8000c58:	d80d      	bhi.n	8000c76 <HAL_GPIO_Init+0x5a>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d02b      	beq.n	8000cb6 <HAL_GPIO_Init+0x9a>
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d804      	bhi.n	8000c6c <HAL_GPIO_Init+0x50>
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d031      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d01c      	beq.n	8000ca4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c6a:	e048      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d043      	beq.n	8000cf8 <HAL_GPIO_Init+0xdc>
 8000c70:	2b11      	cmp	r3, #17
 8000c72:	d01b      	beq.n	8000cac <HAL_GPIO_Init+0x90>
          break;
 8000c74:	e043      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c76:	4a89      	ldr	r2, [pc, #548]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d026      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c7c:	4a87      	ldr	r2, [pc, #540]	; (8000e9c <HAL_GPIO_Init+0x280>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d806      	bhi.n	8000c90 <HAL_GPIO_Init+0x74>
 8000c82:	4a87      	ldr	r2, [pc, #540]	; (8000ea0 <HAL_GPIO_Init+0x284>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d020      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c88:	4a86      	ldr	r2, [pc, #536]	; (8000ea4 <HAL_GPIO_Init+0x288>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d01d      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000c8e:	e036      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c90:	4a85      	ldr	r2, [pc, #532]	; (8000ea8 <HAL_GPIO_Init+0x28c>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d019      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c96:	4a85      	ldr	r2, [pc, #532]	; (8000eac <HAL_GPIO_Init+0x290>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d016      	beq.n	8000cca <HAL_GPIO_Init+0xae>
 8000c9c:	4a84      	ldr	r2, [pc, #528]	; (8000eb0 <HAL_GPIO_Init+0x294>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d013      	beq.n	8000cca <HAL_GPIO_Init+0xae>
          break;
 8000ca2:	e02c      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e028      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e023      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	3308      	adds	r3, #8
 8000cbc:	623b      	str	r3, [r7, #32]
          break;
 8000cbe:	e01e      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	330c      	adds	r3, #12
 8000cc6:	623b      	str	r3, [r7, #32]
          break;
 8000cc8:	e019      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	623b      	str	r3, [r7, #32]
          break;
 8000cd6:	e012      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	689b      	ldr	r3, [r3, #8]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d105      	bne.n	8000cec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	69fa      	ldr	r2, [r7, #28]
 8000ce8:	611a      	str	r2, [r3, #16]
          break;
 8000cea:	e008      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cec:	2308      	movs	r3, #8
 8000cee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	615a      	str	r2, [r3, #20]
          break;
 8000cf6:	e002      	b.n	8000cfe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
          break;
 8000cfc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2bff      	cmp	r3, #255	; 0xff
 8000d02:	d801      	bhi.n	8000d08 <HAL_GPIO_Init+0xec>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	e001      	b.n	8000d0c <HAL_GPIO_Init+0xf0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3304      	adds	r3, #4
 8000d0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2bff      	cmp	r3, #255	; 0xff
 8000d12:	d802      	bhi.n	8000d1a <HAL_GPIO_Init+0xfe>
 8000d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x104>
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	3b08      	subs	r3, #8
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	210f      	movs	r1, #15
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	401a      	ands	r2, r3
 8000d32:	6a39      	ldr	r1, [r7, #32]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	f000 8096 	beq.w	8000e7a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d4e:	4b59      	ldr	r3, [pc, #356]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a58      	ldr	r2, [pc, #352]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b56      	ldr	r3, [pc, #344]	; (8000eb4 <HAL_GPIO_Init+0x298>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d66:	4a54      	ldr	r2, [pc, #336]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f003 0303 	and.w	r3, r3, #3
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	4013      	ands	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a4b      	ldr	r2, [pc, #300]	; (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d013      	beq.n	8000dba <HAL_GPIO_Init+0x19e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4a      	ldr	r2, [pc, #296]	; (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d00d      	beq.n	8000db6 <HAL_GPIO_Init+0x19a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d007      	beq.n	8000db2 <HAL_GPIO_Init+0x196>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d101      	bne.n	8000dae <HAL_GPIO_Init+0x192>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e006      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dae:	2304      	movs	r3, #4
 8000db0:	e004      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db2:	2302      	movs	r3, #2
 8000db4:	e002      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000db6:	2301      	movs	r3, #1
 8000db8:	e000      	b.n	8000dbc <HAL_GPIO_Init+0x1a0>
 8000dba:	2300      	movs	r3, #0
 8000dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dbe:	f002 0203 	and.w	r2, r2, #3
 8000dc2:	0092      	lsls	r2, r2, #2
 8000dc4:	4093      	lsls	r3, r2
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dcc:	493a      	ldr	r1, [pc, #232]	; (8000eb8 <HAL_GPIO_Init+0x29c>)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000de6:	4b39      	ldr	r3, [pc, #228]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4938      	ldr	r1, [pc, #224]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000df4:	4b35      	ldr	r3, [pc, #212]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4933      	ldr	r1, [pc, #204]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	492e      	ldr	r1, [pc, #184]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e14:	69bb      	ldr	r3, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
 8000e1a:	e006      	b.n	8000e2a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	43db      	mvns	r3, r3
 8000e24:	4929      	ldr	r1, [pc, #164]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e26:	4013      	ands	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d006      	beq.n	8000e44 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	4924      	ldr	r1, [pc, #144]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	608b      	str	r3, [r1, #8]
 8000e42:	e006      	b.n	8000e52 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	491f      	ldr	r1, [pc, #124]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	491a      	ldr	r1, [pc, #104]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	60cb      	str	r3, [r1, #12]
 8000e6a:	e006      	b.n	8000e7a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	4915      	ldr	r1, [pc, #84]	; (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e86:	fa22 f303 	lsr.w	r3, r2, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f47f aed0 	bne.w	8000c30 <HAL_GPIO_Init+0x14>
  }
}
 8000e90:	bf00      	nop
 8000e92:	372c      	adds	r7, #44	; 0x2c
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	10210000 	.word	0x10210000
 8000ea0:	10110000 	.word	0x10110000
 8000ea4:	10120000 	.word	0x10120000
 8000ea8:	10310000 	.word	0x10310000
 8000eac:	10320000 	.word	0x10320000
 8000eb0:	10220000 	.word	0x10220000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40011000 	.word	0x40011000
 8000ec8:	40011400 	.word	0x40011400
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	887b      	ldrh	r3, [r7, #2]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	73fb      	strb	r3, [r7, #15]
 8000eec:	e001      	b.n	8000ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr

08000efe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	807b      	strh	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f0e:	787b      	ldrb	r3, [r7, #1]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f14:	887a      	ldrh	r2, [r7, #2]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f1a:	e003      	b.n	8000f24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	041a      	lsls	r2, r3, #16
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	611a      	str	r2, [r3, #16]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d101      	bne.n	8000f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e26c      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 8087 	beq.w	800105e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f50:	4b92      	ldr	r3, [pc, #584]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d00c      	beq.n	8000f76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f5c:	4b8f      	ldr	r3, [pc, #572]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d112      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
 8000f68:	4b8c      	ldr	r3, [pc, #560]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f74:	d10b      	bne.n	8000f8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f76:	4b89      	ldr	r3, [pc, #548]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d06c      	beq.n	800105c <HAL_RCC_OscConfig+0x12c>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d168      	bne.n	800105c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e246      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f96:	d106      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x76>
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	e02e      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x98>
 8000fae:	4b7b      	ldr	r3, [pc, #492]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7a      	ldr	r2, [pc, #488]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	4b78      	ldr	r3, [pc, #480]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a77      	ldr	r2, [pc, #476]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e01d      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd0:	d10c      	bne.n	8000fec <HAL_RCC_OscConfig+0xbc>
 8000fd2:	4b72      	ldr	r3, [pc, #456]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a71      	ldr	r2, [pc, #452]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	4b6f      	ldr	r3, [pc, #444]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6e      	ldr	r2, [pc, #440]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e00b      	b.n	8001004 <HAL_RCC_OscConfig+0xd4>
 8000fec:	4b6b      	ldr	r3, [pc, #428]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a6a      	ldr	r2, [pc, #424]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b68      	ldr	r3, [pc, #416]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a67      	ldr	r2, [pc, #412]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001002:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d013      	beq.n	8001034 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fcf6 	bl	80009fc <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001014:	f7ff fcf2 	bl	80009fc <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b64      	cmp	r3, #100	; 0x64
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e1fa      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4b5d      	ldr	r3, [pc, #372]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d0f0      	beq.n	8001014 <HAL_RCC_OscConfig+0xe4>
 8001032:	e014      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fce2 	bl	80009fc <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcde 	bl	80009fc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e1e6      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	4b53      	ldr	r3, [pc, #332]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x10c>
 800105a:	e000      	b.n	800105e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d063      	beq.n	8001132 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800106a:	4b4c      	ldr	r3, [pc, #304]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00b      	beq.n	800108e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001076:	4b49      	ldr	r3, [pc, #292]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b08      	cmp	r3, #8
 8001080:	d11c      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d116      	bne.n	80010bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	4b43      	ldr	r3, [pc, #268]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	691b      	ldr	r3, [r3, #16]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d001      	beq.n	80010a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e1ba      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4939      	ldr	r1, [pc, #228]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	e03a      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d020      	beq.n	8001106 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c4:	4b36      	ldr	r3, [pc, #216]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fc97 	bl	80009fc <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc93 	bl	80009fc <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e19b      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0f0      	beq.n	80010d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001100:	4313      	orrs	r3, r2
 8001102:	600b      	str	r3, [r1, #0]
 8001104:	e015      	b.n	8001132 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001106:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <HAL_RCC_OscConfig+0x270>)
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110c:	f7ff fc76 	bl	80009fc <HAL_GetTick>
 8001110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff fc72 	bl	80009fc <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e17a      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1f0      	bne.n	8001114 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d03a      	beq.n	80011b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d019      	beq.n	800117a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114c:	f7ff fc56 	bl	80009fc <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001154:	f7ff fc52 	bl	80009fc <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e15a      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_RCC_OscConfig+0x26c>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001172:	2001      	movs	r0, #1
 8001174:	f000 faa8 	bl	80016c8 <RCC_Delay>
 8001178:	e01c      	b.n	80011b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_RCC_OscConfig+0x274>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fc3c 	bl	80009fc <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001186:	e00f      	b.n	80011a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fc38 	bl	80009fc <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d908      	bls.n	80011a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e140      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
 800119a:	bf00      	nop
 800119c:	40021000 	.word	0x40021000
 80011a0:	42420000 	.word	0x42420000
 80011a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	4b9e      	ldr	r3, [pc, #632]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1e9      	bne.n	8001188 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a6 	beq.w	800130e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011c6:	4b97      	ldr	r3, [pc, #604]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10d      	bne.n	80011ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	4b94      	ldr	r3, [pc, #592]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a93      	ldr	r2, [pc, #588]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b91      	ldr	r3, [pc, #580]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ea:	2301      	movs	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011ee:	4b8e      	ldr	r3, [pc, #568]	; (8001428 <HAL_RCC_OscConfig+0x4f8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d118      	bne.n	800122c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011fa:	4b8b      	ldr	r3, [pc, #556]	; (8001428 <HAL_RCC_OscConfig+0x4f8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a8a      	ldr	r2, [pc, #552]	; (8001428 <HAL_RCC_OscConfig+0x4f8>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001206:	f7ff fbf9 	bl	80009fc <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120c:	e008      	b.n	8001220 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800120e:	f7ff fbf5 	bl	80009fc <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b64      	cmp	r3, #100	; 0x64
 800121a:	d901      	bls.n	8001220 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800121c:	2303      	movs	r3, #3
 800121e:	e0fd      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001220:	4b81      	ldr	r3, [pc, #516]	; (8001428 <HAL_RCC_OscConfig+0x4f8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0f0      	beq.n	800120e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x312>
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a7a      	ldr	r2, [pc, #488]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e02d      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x334>
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a75      	ldr	r2, [pc, #468]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b73      	ldr	r3, [pc, #460]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a72      	ldr	r2, [pc, #456]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	e01c      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	2b05      	cmp	r3, #5
 800126a:	d10c      	bne.n	8001286 <HAL_RCC_OscConfig+0x356>
 800126c:	4b6d      	ldr	r3, [pc, #436]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a6c      	ldr	r2, [pc, #432]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001272:	f043 0304 	orr.w	r3, r3, #4
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	4b6a      	ldr	r3, [pc, #424]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a69      	ldr	r2, [pc, #420]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	e00b      	b.n	800129e <HAL_RCC_OscConfig+0x36e>
 8001286:	4b67      	ldr	r3, [pc, #412]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a66      	ldr	r2, [pc, #408]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	f023 0301 	bic.w	r3, r3, #1
 8001290:	6213      	str	r3, [r2, #32]
 8001292:	4b64      	ldr	r3, [pc, #400]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a63      	ldr	r2, [pc, #396]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001298:	f023 0304 	bic.w	r3, r3, #4
 800129c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff fba9 	bl	80009fc <HAL_GetTick>
 80012aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ac:	e00a      	b.n	80012c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ae:	f7ff fba5 	bl	80009fc <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012bc:	4293      	cmp	r3, r2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0ab      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c4:	4b57      	ldr	r3, [pc, #348]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0ee      	beq.n	80012ae <HAL_RCC_OscConfig+0x37e>
 80012d0:	e014      	b.n	80012fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d2:	f7ff fb93 	bl	80009fc <HAL_GetTick>
 80012d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff fb8f 	bl	80009fc <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e095      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f0:	4b4c      	ldr	r3, [pc, #304]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1ee      	bne.n	80012da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d105      	bne.n	800130e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	4b48      	ldr	r3, [pc, #288]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	4a47      	ldr	r2, [pc, #284]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8081 	beq.w	800141a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001318:	4b42      	ldr	r3, [pc, #264]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d061      	beq.n	80013e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d146      	bne.n	80013ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <HAL_RCC_OscConfig+0x4fc>)
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001332:	f7ff fb63 	bl	80009fc <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133a:	f7ff fb5f 	bl	80009fc <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e067      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800134c:	4b35      	ldr	r3, [pc, #212]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001360:	d108      	bne.n	8001374 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	492d      	ldr	r1, [pc, #180]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a19      	ldr	r1, [r3, #32]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	430b      	orrs	r3, r1
 8001386:	4927      	ldr	r1, [pc, #156]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 8001388:	4313      	orrs	r3, r2
 800138a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x4fc>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fb33 	bl	80009fc <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fb2f 	bl	80009fc <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e037      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013ac:	4b1d      	ldr	r3, [pc, #116]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x46a>
 80013b8:	e02f      	b.n	800141a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_RCC_OscConfig+0x4fc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb1c 	bl	80009fc <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fb18 	bl	80009fc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e020      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013da:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x498>
 80013e6:	e018      	b.n	800141a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e013      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	429a      	cmp	r2, r3
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000
 8001428:	40007000 	.word	0x40007000
 800142c:	42420060 	.word	0x42420060

08001430 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e0d0      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001444:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	429a      	cmp	r2, r3
 8001450:	d910      	bls.n	8001474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001452:	4b67      	ldr	r3, [pc, #412]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f023 0207 	bic.w	r2, r3, #7
 800145a:	4965      	ldr	r1, [pc, #404]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	4313      	orrs	r3, r2
 8001460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0b8      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a58      	ldr	r2, [pc, #352]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001496:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0308 	and.w	r3, r3, #8
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4a52      	ldr	r2, [pc, #328]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	494d      	ldr	r1, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d040      	beq.n	8001550 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d6:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d115      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e07f      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e073      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06b      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150e:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f023 0203 	bic.w	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	4936      	ldr	r1, [pc, #216]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001520:	f7ff fa6c 	bl	80009fc <HAL_GetTick>
 8001524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	e00a      	b.n	800153e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001528:	f7ff fa68 	bl	80009fc <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e053      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153e:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 020c 	and.w	r2, r3, #12
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	429a      	cmp	r2, r3
 800154e:	d1eb      	bne.n	8001528 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d210      	bcs.n	8001580 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f023 0207 	bic.w	r2, r3, #7
 8001566:	4922      	ldr	r1, [pc, #136]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	429a      	cmp	r2, r3
 800157a:	d001      	beq.n	8001580 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e032      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4916      	ldr	r1, [pc, #88]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	4313      	orrs	r3, r2
 800159c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d009      	beq.n	80015be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015aa:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	490e      	ldr	r1, [pc, #56]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015be:	f000 f821 	bl	8001604 <HAL_RCC_GetSysClockFreq>
 80015c2:	4601      	mov	r1, r0
 80015c4:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	4a0a      	ldr	r2, [pc, #40]	; (80015f8 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	5cd3      	ldrb	r3, [r2, r3]
 80015d2:	fa21 f303 	lsr.w	r3, r1, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_RCC_ClockConfig+0x1cc>)
 80015d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_RCC_ClockConfig+0x1d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff f9ca 	bl	8000978 <HAL_InitTick>

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40022000 	.word	0x40022000
 80015f4:	40021000 	.word	0x40021000
 80015f8:	080018c4 	.word	0x080018c4
 80015fc:	20000014 	.word	0x20000014
 8001600:	20000018 	.word	0x20000018

08001604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001604:	b490      	push	{r4, r7}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800160c:	1d3c      	adds	r4, r7, #4
 800160e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d002      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x40>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x46>
 8001642:	e02d      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001646:	623b      	str	r3, [r7, #32]
      break;
 8001648:	e02d      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	0c9b      	lsrs	r3, r3, #18
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001656:	4413      	add	r3, r2
 8001658:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800165c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	0c5b      	lsrs	r3, r3, #17
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001676:	4413      	add	r3, r2
 8001678:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800167c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001682:	fb02 f203 	mul.w	r2, r2, r3
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	fbb2 f3f3 	udiv	r3, r2, r3
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
 800168e:	e004      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	623b      	str	r3, [r7, #32]
      break;
 800169e:	e002      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016a2:	623b      	str	r3, [r7, #32]
      break;
 80016a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a6:	6a3b      	ldr	r3, [r7, #32]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3728      	adds	r7, #40	; 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc90      	pop	{r4, r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	080018b0 	.word	0x080018b0
 80016b8:	080018c0 	.word	0x080018c0
 80016bc:	40021000 	.word	0x40021000
 80016c0:	007a1200 	.word	0x007a1200
 80016c4:	003d0900 	.word	0x003d0900

080016c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <RCC_Delay+0x34>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <RCC_Delay+0x38>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0a5b      	lsrs	r3, r3, #9
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016e4:	bf00      	nop
  }
  while (Delay --);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	1e5a      	subs	r2, r3, #1
 80016ea:	60fa      	str	r2, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f9      	bne.n	80016e4 <RCC_Delay+0x1c>
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000014 	.word	0x20000014
 8001700:	10624dd3 	.word	0x10624dd3

08001704 <__errno>:
 8001704:	4b01      	ldr	r3, [pc, #4]	; (800170c <__errno+0x8>)
 8001706:	6818      	ldr	r0, [r3, #0]
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000020 	.word	0x20000020

08001710 <__libc_init_array>:
 8001710:	b570      	push	{r4, r5, r6, lr}
 8001712:	2500      	movs	r5, #0
 8001714:	4e0c      	ldr	r6, [pc, #48]	; (8001748 <__libc_init_array+0x38>)
 8001716:	4c0d      	ldr	r4, [pc, #52]	; (800174c <__libc_init_array+0x3c>)
 8001718:	1ba4      	subs	r4, r4, r6
 800171a:	10a4      	asrs	r4, r4, #2
 800171c:	42a5      	cmp	r5, r4
 800171e:	d109      	bne.n	8001734 <__libc_init_array+0x24>
 8001720:	f000 f8ba 	bl	8001898 <_init>
 8001724:	2500      	movs	r5, #0
 8001726:	4e0a      	ldr	r6, [pc, #40]	; (8001750 <__libc_init_array+0x40>)
 8001728:	4c0a      	ldr	r4, [pc, #40]	; (8001754 <__libc_init_array+0x44>)
 800172a:	1ba4      	subs	r4, r4, r6
 800172c:	10a4      	asrs	r4, r4, #2
 800172e:	42a5      	cmp	r5, r4
 8001730:	d105      	bne.n	800173e <__libc_init_array+0x2e>
 8001732:	bd70      	pop	{r4, r5, r6, pc}
 8001734:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001738:	4798      	blx	r3
 800173a:	3501      	adds	r5, #1
 800173c:	e7ee      	b.n	800171c <__libc_init_array+0xc>
 800173e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001742:	4798      	blx	r3
 8001744:	3501      	adds	r5, #1
 8001746:	e7f2      	b.n	800172e <__libc_init_array+0x1e>
 8001748:	080018d4 	.word	0x080018d4
 800174c:	080018d4 	.word	0x080018d4
 8001750:	080018d4 	.word	0x080018d4
 8001754:	080018d8 	.word	0x080018d8

08001758 <memset>:
 8001758:	4603      	mov	r3, r0
 800175a:	4402      	add	r2, r0
 800175c:	4293      	cmp	r3, r2
 800175e:	d100      	bne.n	8001762 <memset+0xa>
 8001760:	4770      	bx	lr
 8001762:	f803 1b01 	strb.w	r1, [r3], #1
 8001766:	e7f9      	b.n	800175c <memset+0x4>

08001768 <srand>:
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <srand+0x38>)
 800176c:	4605      	mov	r5, r0
 800176e:	681c      	ldr	r4, [r3, #0]
 8001770:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001772:	b97b      	cbnz	r3, 8001794 <srand+0x2c>
 8001774:	2018      	movs	r0, #24
 8001776:	f000 f81b 	bl	80017b0 <malloc>
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <srand+0x3c>)
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <srand+0x40>)
 800177e:	63a0      	str	r0, [r4, #56]	; 0x38
 8001780:	e9c0 2300 	strd	r2, r3, [r0]
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <srand+0x44>)
 8001786:	2201      	movs	r2, #1
 8001788:	6083      	str	r3, [r0, #8]
 800178a:	230b      	movs	r3, #11
 800178c:	8183      	strh	r3, [r0, #12]
 800178e:	2300      	movs	r3, #0
 8001790:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001794:	2200      	movs	r2, #0
 8001796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001798:	611d      	str	r5, [r3, #16]
 800179a:	615a      	str	r2, [r3, #20]
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	bf00      	nop
 80017a0:	20000020 	.word	0x20000020
 80017a4:	abcd330e 	.word	0xabcd330e
 80017a8:	e66d1234 	.word	0xe66d1234
 80017ac:	0005deec 	.word	0x0005deec

080017b0 <malloc>:
 80017b0:	4b02      	ldr	r3, [pc, #8]	; (80017bc <malloc+0xc>)
 80017b2:	4601      	mov	r1, r0
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	f000 b803 	b.w	80017c0 <_malloc_r>
 80017ba:	bf00      	nop
 80017bc:	20000020 	.word	0x20000020

080017c0 <_malloc_r>:
 80017c0:	b570      	push	{r4, r5, r6, lr}
 80017c2:	1ccd      	adds	r5, r1, #3
 80017c4:	f025 0503 	bic.w	r5, r5, #3
 80017c8:	3508      	adds	r5, #8
 80017ca:	2d0c      	cmp	r5, #12
 80017cc:	bf38      	it	cc
 80017ce:	250c      	movcc	r5, #12
 80017d0:	2d00      	cmp	r5, #0
 80017d2:	4606      	mov	r6, r0
 80017d4:	db01      	blt.n	80017da <_malloc_r+0x1a>
 80017d6:	42a9      	cmp	r1, r5
 80017d8:	d903      	bls.n	80017e2 <_malloc_r+0x22>
 80017da:	230c      	movs	r3, #12
 80017dc:	6033      	str	r3, [r6, #0]
 80017de:	2000      	movs	r0, #0
 80017e0:	bd70      	pop	{r4, r5, r6, pc}
 80017e2:	f000 f857 	bl	8001894 <__malloc_lock>
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <_malloc_r+0xac>)
 80017e8:	6814      	ldr	r4, [r2, #0]
 80017ea:	4621      	mov	r1, r4
 80017ec:	b991      	cbnz	r1, 8001814 <_malloc_r+0x54>
 80017ee:	4c20      	ldr	r4, [pc, #128]	; (8001870 <_malloc_r+0xb0>)
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	b91b      	cbnz	r3, 80017fc <_malloc_r+0x3c>
 80017f4:	4630      	mov	r0, r6
 80017f6:	f000 f83d 	bl	8001874 <_sbrk_r>
 80017fa:	6020      	str	r0, [r4, #0]
 80017fc:	4629      	mov	r1, r5
 80017fe:	4630      	mov	r0, r6
 8001800:	f000 f838 	bl	8001874 <_sbrk_r>
 8001804:	1c43      	adds	r3, r0, #1
 8001806:	d124      	bne.n	8001852 <_malloc_r+0x92>
 8001808:	230c      	movs	r3, #12
 800180a:	4630      	mov	r0, r6
 800180c:	6033      	str	r3, [r6, #0]
 800180e:	f000 f842 	bl	8001896 <__malloc_unlock>
 8001812:	e7e4      	b.n	80017de <_malloc_r+0x1e>
 8001814:	680b      	ldr	r3, [r1, #0]
 8001816:	1b5b      	subs	r3, r3, r5
 8001818:	d418      	bmi.n	800184c <_malloc_r+0x8c>
 800181a:	2b0b      	cmp	r3, #11
 800181c:	d90f      	bls.n	800183e <_malloc_r+0x7e>
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	18cc      	adds	r4, r1, r3
 8001822:	50cd      	str	r5, [r1, r3]
 8001824:	4630      	mov	r0, r6
 8001826:	f000 f836 	bl	8001896 <__malloc_unlock>
 800182a:	f104 000b 	add.w	r0, r4, #11
 800182e:	1d23      	adds	r3, r4, #4
 8001830:	f020 0007 	bic.w	r0, r0, #7
 8001834:	1ac3      	subs	r3, r0, r3
 8001836:	d0d3      	beq.n	80017e0 <_malloc_r+0x20>
 8001838:	425a      	negs	r2, r3
 800183a:	50e2      	str	r2, [r4, r3]
 800183c:	e7d0      	b.n	80017e0 <_malloc_r+0x20>
 800183e:	684b      	ldr	r3, [r1, #4]
 8001840:	428c      	cmp	r4, r1
 8001842:	bf16      	itet	ne
 8001844:	6063      	strne	r3, [r4, #4]
 8001846:	6013      	streq	r3, [r2, #0]
 8001848:	460c      	movne	r4, r1
 800184a:	e7eb      	b.n	8001824 <_malloc_r+0x64>
 800184c:	460c      	mov	r4, r1
 800184e:	6849      	ldr	r1, [r1, #4]
 8001850:	e7cc      	b.n	80017ec <_malloc_r+0x2c>
 8001852:	1cc4      	adds	r4, r0, #3
 8001854:	f024 0403 	bic.w	r4, r4, #3
 8001858:	42a0      	cmp	r0, r4
 800185a:	d005      	beq.n	8001868 <_malloc_r+0xa8>
 800185c:	1a21      	subs	r1, r4, r0
 800185e:	4630      	mov	r0, r6
 8001860:	f000 f808 	bl	8001874 <_sbrk_r>
 8001864:	3001      	adds	r0, #1
 8001866:	d0cf      	beq.n	8001808 <_malloc_r+0x48>
 8001868:	6025      	str	r5, [r4, #0]
 800186a:	e7db      	b.n	8001824 <_malloc_r+0x64>
 800186c:	20000138 	.word	0x20000138
 8001870:	2000013c 	.word	0x2000013c

08001874 <_sbrk_r>:
 8001874:	b538      	push	{r3, r4, r5, lr}
 8001876:	2300      	movs	r3, #0
 8001878:	4c05      	ldr	r4, [pc, #20]	; (8001890 <_sbrk_r+0x1c>)
 800187a:	4605      	mov	r5, r0
 800187c:	4608      	mov	r0, r1
 800187e:	6023      	str	r3, [r4, #0]
 8001880:	f7ff f802 	bl	8000888 <_sbrk>
 8001884:	1c43      	adds	r3, r0, #1
 8001886:	d102      	bne.n	800188e <_sbrk_r+0x1a>
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	b103      	cbz	r3, 800188e <_sbrk_r+0x1a>
 800188c:	602b      	str	r3, [r5, #0]
 800188e:	bd38      	pop	{r3, r4, r5, pc}
 8001890:	20000144 	.word	0x20000144

08001894 <__malloc_lock>:
 8001894:	4770      	bx	lr

08001896 <__malloc_unlock>:
 8001896:	4770      	bx	lr

08001898 <_init>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	bf00      	nop
 800189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189e:	bc08      	pop	{r3}
 80018a0:	469e      	mov	lr, r3
 80018a2:	4770      	bx	lr

080018a4 <_fini>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr
