
Genius_stm32_1.5_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001704  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001810  08001810  00011810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001834  08001834  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08001834  08001834  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001834  08001834  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001834  08001834  00011834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001838  08001838  00011838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800183c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000084  080018c0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080018c0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038eb  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f75  00000000  00000000  00023998  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000408  00000000  00000000  00024910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000370  00000000  00000000  00024d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015bb0  00000000  00000000  00025088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041d8  00000000  00000000  0003ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007da40  00000000  00000000  0003ee10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc850  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f54  00000000  00000000  000bc8cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080017f8 	.word	0x080017f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080017f8 	.word	0x080017f8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fbab 	bl	80008ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f885 	bl	8000264 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8bf 	bl	80002dc <MX_GPIO_Init>
	  	  //BOTAO VERDE: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1   BOTAO 2
	  	  //BOTAO AMARELO: HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1  BOTAO 3

	  //BOTAO CINZA(BOTAO INICIAR): HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1  BOTAO 4

	  while(botao_iniciar_apertado == false ){
 800015e:	e042      	b.n	80001e6 <main+0x9a>


	     if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_3) == 1){
 8000160:	2108      	movs	r1, #8
 8000162:	4838      	ldr	r0, [pc, #224]	; (8000244 <main+0xf8>)
 8000164:	f000 fe64 	bl	8000e30 <HAL_GPIO_ReadPin>
 8000168:	4603      	mov	r3, r0
 800016a:	2b01      	cmp	r3, #1
 800016c:	d13b      	bne.n	80001e6 <main+0x9a>
	       botao_iniciar_apertado = true;
 800016e:	4b36      	ldr	r3, [pc, #216]	; (8000248 <main+0xfc>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <main+0x100>)
 8000174:	6013      	str	r3, [r2, #0]
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017c:	4831      	ldr	r0, [pc, #196]	; (8000244 <main+0xf8>)
 800017e:	f000 fe6e 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 8000182:	2201      	movs	r2, #1
 8000184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000188:	482e      	ldr	r0, [pc, #184]	; (8000244 <main+0xf8>)
 800018a:	f000 fe68 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 800018e:	2201      	movs	r2, #1
 8000190:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000194:	482b      	ldr	r0, [pc, #172]	; (8000244 <main+0xf8>)
 8000196:	f000 fe62 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001a0:	4828      	ldr	r0, [pc, #160]	; (8000244 <main+0xf8>)
 80001a2:	f000 fe5c 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_Delay(1000);
 80001a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001aa:	f000 fbe1 	bl	8000970 <HAL_Delay>
	       HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 80001ae:	2200      	movs	r2, #0
 80001b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001b4:	4823      	ldr	r0, [pc, #140]	; (8000244 <main+0xf8>)
 80001b6:	f000 fe52 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 80001ba:	2200      	movs	r2, #0
 80001bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001c0:	4820      	ldr	r0, [pc, #128]	; (8000244 <main+0xf8>)
 80001c2:	f000 fe4c 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001cc:	481d      	ldr	r0, [pc, #116]	; (8000244 <main+0xf8>)
 80001ce:	f000 fe46 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80001d2:	2200      	movs	r2, #0
 80001d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d8:	481a      	ldr	r0, [pc, #104]	; (8000244 <main+0xf8>)
 80001da:	f000 fe40 	bl	8000e5e <HAL_GPIO_WritePin>
		   HAL_Delay(1000);
 80001de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e2:	f000 fbc5 	bl	8000970 <HAL_Delay>
	  while(botao_iniciar_apertado == false ){
 80001e6:	4b19      	ldr	r3, [pc, #100]	; (800024c <main+0x100>)
 80001e8:	681a      	ldr	r2, [r3, #0]
 80001ea:	4b19      	ldr	r3, [pc, #100]	; (8000250 <main+0x104>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	429a      	cmp	r2, r3
 80001f0:	d0b6      	beq.n	8000160 <main+0x14>

	     }
	   }

	  	  	proximaRodada();
 80001f2:	f000 f8cd 	bl	8000390 <proximaRodada>
	 	    reproduzirSequencia();
 80001f6:	f000 f8ed 	bl	80003d4 <reproduzirSequencia>
	 	    aguardarJogador();
 80001fa:	f000 f981 	bl	8000500 <aguardarJogador>
	 	    // estrutura usada para reiniciar todas as variáveis (novo jogo)
	 	    if (game_over == true) {
 80001fe:	4b15      	ldr	r3, [pc, #84]	; (8000254 <main+0x108>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b11      	ldr	r3, [pc, #68]	; (8000248 <main+0xfc>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	429a      	cmp	r2, r3
 8000208:	d117      	bne.n	800023a <main+0xee>
	 	    	for(int i=0;i<32;i++)
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e007      	b.n	8000220 <main+0xd4>
	 	    			sequencia[i] = 0; // caso comentar, não dá erros
 8000210:	4a11      	ldr	r2, [pc, #68]	; (8000258 <main+0x10c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2100      	movs	r1, #0
 8000216:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 	    	for(int i=0;i<32;i++)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	3301      	adds	r3, #1
 800021e:	607b      	str	r3, [r7, #4]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b1f      	cmp	r3, #31
 8000224:	ddf4      	ble.n	8000210 <main+0xc4>
	 	      rodada = 0;
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <main+0x110>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
	 	      passo = 0;
 800022c:	4b0c      	ldr	r3, [pc, #48]	; (8000260 <main+0x114>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
	 	      game_over = false;
 8000232:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x104>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4a07      	ldr	r2, [pc, #28]	; (8000254 <main+0x108>)
 8000238:	6013      	str	r3, [r2, #0]
	 	    }
	 	    HAL_Delay(1000);
 800023a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023e:	f000 fb97 	bl	8000970 <HAL_Delay>
	  while(botao_iniciar_apertado == false ){
 8000242:	e7d0      	b.n	80001e6 <main+0x9a>
 8000244:	40010800 	.word	0x40010800
 8000248:	20000010 	.word	0x20000010
 800024c:	20000130 	.word	0x20000130
 8000250:	20000128 	.word	0x20000128
 8000254:	2000012c 	.word	0x2000012c
 8000258:	200000a0 	.word	0x200000a0
 800025c:	20000120 	.word	0x20000120
 8000260:	20000124 	.word	0x20000124

08000264 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b090      	sub	sp, #64	; 0x40
 8000268:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	2228      	movs	r2, #40	; 0x28
 8000270:	2100      	movs	r1, #0
 8000272:	4618      	mov	r0, r3
 8000274:	f001 fa20 	bl	80016b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
 800027e:	605a      	str	r2, [r3, #4]
 8000280:	609a      	str	r2, [r3, #8]
 8000282:	60da      	str	r2, [r3, #12]
 8000284:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	2302      	movs	r3, #2
 8000288:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028a:	2301      	movs	r3, #1
 800028c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028e:	2310      	movs	r3, #16
 8000290:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	2300      	movs	r3, #0
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	f107 0318 	add.w	r3, r7, #24
 800029a:	4618      	mov	r0, r3
 800029c:	f000 fdf8 	bl	8000e90 <HAL_RCC_OscConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002a6:	f000 fa41 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002aa:	230f      	movs	r3, #15
 80002ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2100      	movs	r1, #0
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 f864 	bl	8001390 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002ce:	f000 fa2d 	bl	800072c <Error_Handler>
  }
}
 80002d2:	bf00      	nop
 80002d4:	3740      	adds	r7, #64	; 0x40
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b24      	ldr	r3, [pc, #144]	; (8000384 <MX_GPIO_Init+0xa8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a23      	ldr	r2, [pc, #140]	; (8000384 <MX_GPIO_Init+0xa8>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b21      	ldr	r3, [pc, #132]	; (8000384 <MX_GPIO_Init+0xa8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_GPIO_Init+0xa8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1d      	ldr	r2, [pc, #116]	; (8000384 <MX_GPIO_Init+0xa8>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b1b      	ldr	r3, [pc, #108]	; (8000384 <MX_GPIO_Init+0xa8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 8000326:	4818      	ldr	r0, [pc, #96]	; (8000388 <MX_GPIO_Init+0xac>)
 8000328:	f000 fd99 	bl	8000e5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800032c:	2308      	movs	r3, #8
 800032e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000338:	f107 0308 	add.w	r3, r7, #8
 800033c:	4619      	mov	r1, r3
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <MX_GPIO_Init+0xac>)
 8000340:	f000 fc1c 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8000344:	f640 4303 	movw	r3, #3075	; 0xc03
 8000348:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	480c      	ldr	r0, [pc, #48]	; (800038c <MX_GPIO_Init+0xb0>)
 800035a:	f000 fc0f 	bl	8000b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800035e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8000362:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000364:	2301      	movs	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	4619      	mov	r1, r3
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_GPIO_Init+0xac>)
 8000378:	f000 fc00 	bl	8000b7c <HAL_GPIO_Init>

}
 800037c:	bf00      	nop
 800037e:	3718      	adds	r7, #24
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00

08000390 <proximaRodada>:

/* USER CODE BEGIN 4 */
//insrindo funções inicio
void proximaRodada() {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0

  int sorteio = srand()%4; //comando correto:  int sorteio = random(4);
 8000396:	f001 f997 	bl	80016c8 <srand>
 800039a:	4603      	mov	r3, r0
 800039c:	425a      	negs	r2, r3
 800039e:	f003 0303 	and.w	r3, r3, #3
 80003a2:	f002 0203 	and.w	r2, r2, #3
 80003a6:	bf58      	it	pl
 80003a8:	4253      	negpl	r3, r2
 80003aa:	607b      	str	r3, [r7, #4]


  sequencia[rodada] = sorteio;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <proximaRodada+0x3c>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	4907      	ldr	r1, [pc, #28]	; (80003d0 <proximaRodada+0x40>)
 80003b2:	687a      	ldr	r2, [r7, #4]
 80003b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  rodada = rodada + 1;
 80003b8:	4b04      	ldr	r3, [pc, #16]	; (80003cc <proximaRodada+0x3c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	3301      	adds	r3, #1
 80003be:	4a03      	ldr	r2, [pc, #12]	; (80003cc <proximaRodada+0x3c>)
 80003c0:	6013      	str	r3, [r2, #0]
  //Serial.print(sorteio);
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	20000120 	.word	0x20000120
 80003d0:	200000a0 	.word	0x200000a0

080003d4 <reproduzirSequencia>:

void reproduzirSequencia() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
  for (int i = 0; i < rodada; i++) {
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e07d      	b.n	80004dc <reproduzirSequencia+0x108>

        if(leds[sequencia[i]] == leds[0]){// 8 é o pino
 80003e0:	4a43      	ldr	r2, [pc, #268]	; (80004f0 <reproduzirSequencia+0x11c>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	4a42      	ldr	r2, [pc, #264]	; (80004f4 <reproduzirSequencia+0x120>)
 80003ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003ee:	4b41      	ldr	r3, [pc, #260]	; (80004f4 <reproduzirSequencia+0x120>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d113      	bne.n	800041e <reproduzirSequencia+0x4a>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 80003f6:	2201      	movs	r2, #1
 80003f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fc:	483e      	ldr	r0, [pc, #248]	; (80004f8 <reproduzirSequencia+0x124>)
 80003fe:	f000 fd2e 	bl	8000e5e <HAL_GPIO_WritePin>
            HAL_Delay(500);
 8000402:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000406:	f000 fab3 	bl	8000970 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000410:	4839      	ldr	r0, [pc, #228]	; (80004f8 <reproduzirSequencia+0x124>)
 8000412:	f000 fd24 	bl	8000e5e <HAL_GPIO_WritePin>
            HAL_Delay(100);
 8000416:	2064      	movs	r0, #100	; 0x64
 8000418:	f000 faaa 	bl	8000970 <HAL_Delay>
 800041c:	e05b      	b.n	80004d6 <reproduzirSequencia+0x102>
          }

      else  if(leds[sequencia[i]] == leds[1]){
 800041e:	4a34      	ldr	r2, [pc, #208]	; (80004f0 <reproduzirSequencia+0x11c>)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000426:	4a33      	ldr	r2, [pc, #204]	; (80004f4 <reproduzirSequencia+0x120>)
 8000428:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800042c:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <reproduzirSequencia+0x120>)
 800042e:	685b      	ldr	r3, [r3, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	d113      	bne.n	800045c <reproduzirSequencia+0x88>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800043a:	482f      	ldr	r0, [pc, #188]	; (80004f8 <reproduzirSequencia+0x124>)
 800043c:	f000 fd0f 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(500);
 8000440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000444:	f000 fa94 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044e:	482a      	ldr	r0, [pc, #168]	; (80004f8 <reproduzirSequencia+0x124>)
 8000450:	f000 fd05 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(100);
 8000454:	2064      	movs	r0, #100	; 0x64
 8000456:	f000 fa8b 	bl	8000970 <HAL_Delay>
 800045a:	e03c      	b.n	80004d6 <reproduzirSequencia+0x102>
        }

      else  if(leds[sequencia[i]] == leds[2]){
 800045c:	4a24      	ldr	r2, [pc, #144]	; (80004f0 <reproduzirSequencia+0x11c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000464:	4a23      	ldr	r2, [pc, #140]	; (80004f4 <reproduzirSequencia+0x120>)
 8000466:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <reproduzirSequencia+0x120>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	429a      	cmp	r2, r3
 8000470:	d113      	bne.n	800049a <reproduzirSequencia+0xc6>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000472:	2201      	movs	r2, #1
 8000474:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000478:	481f      	ldr	r0, [pc, #124]	; (80004f8 <reproduzirSequencia+0x124>)
 800047a:	f000 fcf0 	bl	8000e5e <HAL_GPIO_WritePin>
      HAL_Delay(500);
 800047e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000482:	f000 fa75 	bl	8000970 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048c:	481a      	ldr	r0, [pc, #104]	; (80004f8 <reproduzirSequencia+0x124>)
 800048e:	f000 fce6 	bl	8000e5e <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8000492:	2064      	movs	r0, #100	; 0x64
 8000494:	f000 fa6c 	bl	8000970 <HAL_Delay>
 8000498:	e01d      	b.n	80004d6 <reproduzirSequencia+0x102>
    }

      else  if(leds[sequencia[i]] == leds[3]){
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <reproduzirSequencia+0x11c>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <reproduzirSequencia+0x120>)
 80004a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a8:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <reproduzirSequencia+0x120>)
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	d112      	bne.n	80004d6 <reproduzirSequencia+0x102>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80004b0:	2201      	movs	r2, #1
 80004b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <reproduzirSequencia+0x124>)
 80004b8:	f000 fcd1 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(500);
 80004bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004c0:	f000 fa56 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ca:	480b      	ldr	r0, [pc, #44]	; (80004f8 <reproduzirSequencia+0x124>)
 80004cc:	f000 fcc7 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(100);
 80004d0:	2064      	movs	r0, #100	; 0x64
 80004d2:	f000 fa4d 	bl	8000970 <HAL_Delay>
  for (int i = 0; i < rodada; i++) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	4b07      	ldr	r3, [pc, #28]	; (80004fc <reproduzirSequencia+0x128>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	429a      	cmp	r2, r3
 80004e4:	f6ff af7c 	blt.w	80003e0 <reproduzirSequencia+0xc>
        }


  }
}
 80004e8:	bf00      	nop
 80004ea:	3708      	adds	r7, #8
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	200000a0 	.word	0x200000a0
 80004f4:	20000000 	.word	0x20000000
 80004f8:	40010800 	.word	0x40010800
 80004fc:	20000120 	.word	0x20000120

08000500 <aguardarJogador>:

void aguardarJogador() {
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
  int botao_pressionado = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < rodada; i++) {
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
 800050e:	e0f0      	b.n	80006f2 <aguardarJogador+0x1f2>
     int jogada_efetuada = false;
 8000510:	4b7e      	ldr	r3, [pc, #504]	; (800070c <aguardarJogador+0x20c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	60fb      	str	r3, [r7, #12]
    while (jogada_efetuada == false) {
 8000516:	e07d      	b.n	8000614 <aguardarJogador+0x114>
      for (int i = 0; i <= 3; i++) {
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	e077      	b.n	800060e <aguardarJogador+0x10e>
         if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == 1) {
 800051e:	2101      	movs	r1, #1
 8000520:	487b      	ldr	r0, [pc, #492]	; (8000710 <aguardarJogador+0x210>)
 8000522:	f000 fc85 	bl	8000e30 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b01      	cmp	r3, #1
 800052a:	d115      	bne.n	8000558 <aguardarJogador+0x58>
          botao_pressionado = 0;
 800052c:	2300      	movs	r3, #0
 800052e:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 8000530:	2201      	movs	r2, #1
 8000532:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000536:	4877      	ldr	r0, [pc, #476]	; (8000714 <aguardarJogador+0x214>)
 8000538:	f000 fc91 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(300);
 800053c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000540:	f000 fa16 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800054a:	4872      	ldr	r0, [pc, #456]	; (8000714 <aguardarJogador+0x214>)
 800054c:	f000 fc87 	bl	8000e5e <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 8000550:	4b71      	ldr	r3, [pc, #452]	; (8000718 <aguardarJogador+0x218>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	60fb      	str	r3, [r7, #12]
 8000556:	e057      	b.n	8000608 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 1) {
 8000558:	2102      	movs	r1, #2
 800055a:	486d      	ldr	r0, [pc, #436]	; (8000710 <aguardarJogador+0x210>)
 800055c:	f000 fc68 	bl	8000e30 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b01      	cmp	r3, #1
 8000564:	d115      	bne.n	8000592 <aguardarJogador+0x92>
          botao_pressionado = 1;
 8000566:	2301      	movs	r3, #1
 8000568:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000570:	4868      	ldr	r0, [pc, #416]	; (8000714 <aguardarJogador+0x214>)
 8000572:	f000 fc74 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(300);
 8000576:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800057a:	f000 f9f9 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000584:	4863      	ldr	r0, [pc, #396]	; (8000714 <aguardarJogador+0x214>)
 8000586:	f000 fc6a 	bl	8000e5e <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 800058a:	4b63      	ldr	r3, [pc, #396]	; (8000718 <aguardarJogador+0x218>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	e03a      	b.n	8000608 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == 1) {
 8000592:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000596:	485e      	ldr	r0, [pc, #376]	; (8000710 <aguardarJogador+0x210>)
 8000598:	f000 fc4a 	bl	8000e30 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d115      	bne.n	80005ce <aguardarJogador+0xce>
          botao_pressionado = 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	4859      	ldr	r0, [pc, #356]	; (8000714 <aguardarJogador+0x214>)
 80005ae:	f000 fc56 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80005b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005b6:	f000 f9db 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005c0:	4854      	ldr	r0, [pc, #336]	; (8000714 <aguardarJogador+0x214>)
 80005c2:	f000 fc4c 	bl	8000e5e <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 80005c6:	4b54      	ldr	r3, [pc, #336]	; (8000718 <aguardarJogador+0x218>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e01c      	b.n	8000608 <aguardarJogador+0x108>
        }

        else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1) {
 80005ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005d2:	484f      	ldr	r0, [pc, #316]	; (8000710 <aguardarJogador+0x210>)
 80005d4:	f000 fc2c 	bl	8000e30 <HAL_GPIO_ReadPin>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d114      	bne.n	8000608 <aguardarJogador+0x108>
          botao_pressionado = 3;
 80005de:	2303      	movs	r3, #3
 80005e0:	617b      	str	r3, [r7, #20]

          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e8:	484a      	ldr	r0, [pc, #296]	; (8000714 <aguardarJogador+0x214>)
 80005ea:	f000 fc38 	bl	8000e5e <HAL_GPIO_WritePin>
          HAL_Delay(300);
 80005ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80005f2:	f000 f9bd 	bl	8000970 <HAL_Delay>
          HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005fc:	4845      	ldr	r0, [pc, #276]	; (8000714 <aguardarJogador+0x214>)
 80005fe:	f000 fc2e 	bl	8000e5e <HAL_GPIO_WritePin>

          jogada_efetuada = true;
 8000602:	4b45      	ldr	r3, [pc, #276]	; (8000718 <aguardarJogador+0x218>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	60fb      	str	r3, [r7, #12]
      for (int i = 0; i <= 3; i++) {
 8000608:	68bb      	ldr	r3, [r7, #8]
 800060a:	3301      	adds	r3, #1
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	2b03      	cmp	r3, #3
 8000612:	dd84      	ble.n	800051e <aguardarJogador+0x1e>
    while (jogada_efetuada == false) {
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <aguardarJogador+0x20c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	f43f af7c 	beq.w	8000518 <aguardarJogador+0x18>


      }
    }
    //verificar a jogada
    if (sequencia[passo] != botao_pressionado) {
 8000620:	4b3e      	ldr	r3, [pc, #248]	; (800071c <aguardarJogador+0x21c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a3e      	ldr	r2, [pc, #248]	; (8000720 <aguardarJogador+0x220>)
 8000626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800062a:	697a      	ldr	r2, [r7, #20]
 800062c:	429a      	cmp	r2, r3
 800062e:	d058      	beq.n	80006e2 <aguardarJogador+0x1e2>
      //efeito luminoso/sonoro indicando que o jogador perdeu
      for (int i = 0; i <= 3; i++) {
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	e04d      	b.n	80006d2 <aguardarJogador+0x1d2>


            if(i == 0){
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d10f      	bne.n	800065c <aguardarJogador+0x15c>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 1);
 800063c:	2201      	movs	r2, #1
 800063e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000642:	4834      	ldr	r0, [pc, #208]	; (8000714 <aguardarJogador+0x214>)
 8000644:	f000 fc0b 	bl	8000e5e <HAL_GPIO_WritePin>
              HAL_Delay(100);
 8000648:	2064      	movs	r0, #100	; 0x64
 800064a:	f000 f991 	bl	8000970 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000654:	482f      	ldr	r0, [pc, #188]	; (8000714 <aguardarJogador+0x214>)
 8000656:	f000 fc02 	bl	8000e5e <HAL_GPIO_WritePin>
 800065a:	e037      	b.n	80006cc <aguardarJogador+0x1cc>
              }

            else if(i == 1){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d10f      	bne.n	8000682 <aguardarJogador+0x182>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 1);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000668:	482a      	ldr	r0, [pc, #168]	; (8000714 <aguardarJogador+0x214>)
 800066a:	f000 fbf8 	bl	8000e5e <HAL_GPIO_WritePin>
              HAL_Delay(100);
 800066e:	2064      	movs	r0, #100	; 0x64
 8000670:	f000 f97e 	bl	8000970 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_10, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800067a:	4826      	ldr	r0, [pc, #152]	; (8000714 <aguardarJogador+0x214>)
 800067c:	f000 fbef 	bl	8000e5e <HAL_GPIO_WritePin>
 8000680:	e024      	b.n	80006cc <aguardarJogador+0x1cc>
              }

            else if(i == 2){
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10f      	bne.n	80006a8 <aguardarJogador+0x1a8>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 1);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068e:	4821      	ldr	r0, [pc, #132]	; (8000714 <aguardarJogador+0x214>)
 8000690:	f000 fbe5 	bl	8000e5e <HAL_GPIO_WritePin>
              HAL_Delay(100);
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 f96b 	bl	8000970 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a0:	481c      	ldr	r0, [pc, #112]	; (8000714 <aguardarJogador+0x214>)
 80006a2:	f000 fbdc 	bl	8000e5e <HAL_GPIO_WritePin>
 80006a6:	e011      	b.n	80006cc <aguardarJogador+0x1cc>
              }

            else if(i == 3){
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d10e      	bne.n	80006cc <aguardarJogador+0x1cc>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	4817      	ldr	r0, [pc, #92]	; (8000714 <aguardarJogador+0x214>)
 80006b6:	f000 fbd2 	bl	8000e5e <HAL_GPIO_WritePin>
              HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f000 f958 	bl	8000970 <HAL_Delay>
              HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4813      	ldr	r0, [pc, #76]	; (8000714 <aguardarJogador+0x214>)
 80006c8:	f000 fbc9 	bl	8000e5e <HAL_GPIO_WritePin>
      for (int i = 0; i <= 3; i++) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3301      	adds	r3, #1
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	ddae      	ble.n	8000636 <aguardarJogador+0x136>
          }



      }
      game_over = true;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <aguardarJogador+0x218>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a11      	ldr	r2, [pc, #68]	; (8000724 <aguardarJogador+0x224>)
 80006de:	6013      	str	r3, [r2, #0]
      break;
 80006e0:	e00d      	b.n	80006fe <aguardarJogador+0x1fe>
    }
    passo = passo + 1;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <aguardarJogador+0x21c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	3301      	adds	r3, #1
 80006e8:	4a0c      	ldr	r2, [pc, #48]	; (800071c <aguardarJogador+0x21c>)
 80006ea:	6013      	str	r3, [r2, #0]
  for (int i = 0; i < rodada; i++) {
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	3301      	adds	r3, #1
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <aguardarJogador+0x228>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	693a      	ldr	r2, [r7, #16]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	f6ff af09 	blt.w	8000510 <aguardarJogador+0x10>
  }
  passo = 0;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <aguardarJogador+0x21c>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	3718      	adds	r7, #24
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	20000128 	.word	0x20000128
 8000710:	40010c00 	.word	0x40010c00
 8000714:	40010800 	.word	0x40010800
 8000718:	20000010 	.word	0x20000010
 800071c:	20000124 	.word	0x20000124
 8000720:	200000a0 	.word	0x200000a0
 8000724:	2000012c 	.word	0x2000012c
 8000728:	20000120 	.word	0x20000120

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000732:	e7fe      	b.n	8000732 <Error_Handler+0x6>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <HAL_MspInit+0x5c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_MspInit+0x5c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x5c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x5c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_MspInit+0x60>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_MspInit+0x60>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40021000 	.word	0x40021000
 8000794:	40010000 	.word	0x40010000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f8ab 	bl	8000938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
	...

080007e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007f0:	4a14      	ldr	r2, [pc, #80]	; (8000844 <_sbrk+0x5c>)
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <_sbrk+0x60>)
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007fc:	4b13      	ldr	r3, [pc, #76]	; (800084c <_sbrk+0x64>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d102      	bne.n	800080a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <_sbrk+0x64>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <_sbrk+0x68>)
 8000808:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	693a      	ldr	r2, [r7, #16]
 8000814:	429a      	cmp	r2, r3
 8000816:	d207      	bcs.n	8000828 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000818:	f000 ff24 	bl	8001664 <__errno>
 800081c:	4602      	mov	r2, r0
 800081e:	230c      	movs	r3, #12
 8000820:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	e009      	b.n	800083c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <_sbrk+0x64>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800082e:	4b07      	ldr	r3, [pc, #28]	; (800084c <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	; (800084c <_sbrk+0x64>)
 8000838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800083a:	68fb      	ldr	r3, [r7, #12]
}
 800083c:	4618      	mov	r0, r3
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20005000 	.word	0x20005000
 8000848:	00000400 	.word	0x00000400
 800084c:	20000134 	.word	0x20000134
 8000850:	20000148 	.word	0x20000148

08000854 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000860:	480c      	ldr	r0, [pc, #48]	; (8000894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000862:	490d      	ldr	r1, [pc, #52]	; (8000898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000864:	4a0d      	ldr	r2, [pc, #52]	; (800089c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000868:	e002      	b.n	8000870 <LoopCopyDataInit>

0800086a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800086c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086e:	3304      	adds	r3, #4

08000870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000874:	d3f9      	bcc.n	800086a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000876:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000878:	4c0a      	ldr	r4, [pc, #40]	; (80008a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800087c:	e001      	b.n	8000882 <LoopFillZerobss>

0800087e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000880:	3204      	adds	r2, #4

08000882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000884:	d3fb      	bcc.n	800087e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000886:	f7ff ffe5 	bl	8000854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f000 fef1 	bl	8001670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fc5d 	bl	800014c <main>
  bx lr
 8000892:	4770      	bx	lr
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000898:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800089c:	0800183c 	.word	0x0800183c
  ldr r2, =_sbss
 80008a0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80008a4:	20000148 	.word	0x20000148

080008a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a8:	e7fe      	b.n	80008a8 <ADC1_2_IRQHandler>
	...

080008ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_Init+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_Init+0x28>)
 80008b6:	f043 0310 	orr.w	r3, r3, #16
 80008ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008bc:	2003      	movs	r0, #3
 80008be:	f000 f929 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f808 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c8:	f7ff ff34 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x54>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_InitTick+0x58>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f933 	bl	8000b62 <HAL_SYSTICK_Config>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	e00e      	b.n	8000924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2b0f      	cmp	r3, #15
 800090a:	d80a      	bhi.n	8000922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800090c:	2200      	movs	r2, #0
 800090e:	6879      	ldr	r1, [r7, #4]
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f000 f909 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <HAL_InitTick+0x5c>)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091e:	2300      	movs	r3, #0
 8000920:	e000      	b.n	8000924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000014 	.word	0x20000014
 8000930:	2000001c 	.word	0x2000001c
 8000934:	20000018 	.word	0x20000018

08000938 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800093c:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x1c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	461a      	mov	r2, r3
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_IncTick+0x20>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4413      	add	r3, r2
 8000948:	4a03      	ldr	r2, [pc, #12]	; (8000958 <HAL_IncTick+0x20>)
 800094a:	6013      	str	r3, [r2, #0]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	2000001c 	.word	0x2000001c
 8000958:	20000140 	.word	0x20000140

0800095c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return uwTick;
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <HAL_GetTick+0x10>)
 8000962:	681b      	ldr	r3, [r3, #0]
}
 8000964:	4618      	mov	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	20000140 	.word	0x20000140

08000970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000978:	f7ff fff0 	bl	800095c <HAL_GetTick>
 800097c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000988:	d005      	beq.n	8000996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <HAL_Delay+0x40>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	4413      	add	r3, r2
 8000994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000996:	bf00      	nop
 8000998:	f7ff ffe0 	bl	800095c <HAL_GetTick>
 800099c:	4602      	mov	r2, r0
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d8f7      	bhi.n	8000998 <HAL_Delay+0x28>
  {
  }
}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000001c 	.word	0x2000001c

080009b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ca:	68ba      	ldr	r2, [r7, #8]
 80009cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <__NVIC_SetPriorityGrouping+0x44>)
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	60d3      	str	r3, [r2, #12]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <__NVIC_GetPriorityGrouping+0x18>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	f003 0307 	and.w	r3, r3, #7
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bc80      	pop	{r7}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	6039      	str	r1, [r7, #0]
 8000a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db0a      	blt.n	8000a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	490c      	ldr	r1, [pc, #48]	; (8000a64 <__NVIC_SetPriority+0x4c>)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	0112      	lsls	r2, r2, #4
 8000a38:	b2d2      	uxtb	r2, r2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a40:	e00a      	b.n	8000a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4908      	ldr	r1, [pc, #32]	; (8000a68 <__NVIC_SetPriority+0x50>)
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	3b04      	subs	r3, #4
 8000a50:	0112      	lsls	r2, r2, #4
 8000a52:	b2d2      	uxtb	r2, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	761a      	strb	r2, [r3, #24]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000e100 	.word	0xe000e100
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f003 0307 	and.w	r3, r3, #7
 8000a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	f1c3 0307 	rsb	r3, r3, #7
 8000a86:	2b04      	cmp	r3, #4
 8000a88:	bf28      	it	cs
 8000a8a:	2304      	movcs	r3, #4
 8000a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3304      	adds	r3, #4
 8000a92:	2b06      	cmp	r3, #6
 8000a94:	d902      	bls.n	8000a9c <NVIC_EncodePriority+0x30>
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3b03      	subs	r3, #3
 8000a9a:	e000      	b.n	8000a9e <NVIC_EncodePriority+0x32>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aaa:	43da      	mvns	r2, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	43d9      	mvns	r1, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac4:	4313      	orrs	r3, r2
         );
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3724      	adds	r7, #36	; 0x24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff90 	bl	8000a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff49 	bl	80009b4 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5e 	bl	80009fc <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff90 	bl	8000a6c <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5f 	bl	8000a18 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b08b      	sub	sp, #44	; 0x2c
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8e:	e127      	b.n	8000de0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b90:	2201      	movs	r2, #1
 8000b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	69fa      	ldr	r2, [r7, #28]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ba4:	69ba      	ldr	r2, [r7, #24]
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	f040 8116 	bne.w	8000dda <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b12      	cmp	r3, #18
 8000bb4:	d034      	beq.n	8000c20 <HAL_GPIO_Init+0xa4>
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	d80d      	bhi.n	8000bd6 <HAL_GPIO_Init+0x5a>
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d02b      	beq.n	8000c16 <HAL_GPIO_Init+0x9a>
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d804      	bhi.n	8000bcc <HAL_GPIO_Init+0x50>
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d031      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d01c      	beq.n	8000c04 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bca:	e048      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bcc:	2b03      	cmp	r3, #3
 8000bce:	d043      	beq.n	8000c58 <HAL_GPIO_Init+0xdc>
 8000bd0:	2b11      	cmp	r3, #17
 8000bd2:	d01b      	beq.n	8000c0c <HAL_GPIO_Init+0x90>
          break;
 8000bd4:	e043      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bd6:	4a89      	ldr	r2, [pc, #548]	; (8000dfc <HAL_GPIO_Init+0x280>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d026      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
 8000bdc:	4a87      	ldr	r2, [pc, #540]	; (8000dfc <HAL_GPIO_Init+0x280>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d806      	bhi.n	8000bf0 <HAL_GPIO_Init+0x74>
 8000be2:	4a87      	ldr	r2, [pc, #540]	; (8000e00 <HAL_GPIO_Init+0x284>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d020      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
 8000be8:	4a86      	ldr	r2, [pc, #536]	; (8000e04 <HAL_GPIO_Init+0x288>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d01d      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
          break;
 8000bee:	e036      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bf0:	4a85      	ldr	r2, [pc, #532]	; (8000e08 <HAL_GPIO_Init+0x28c>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d019      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
 8000bf6:	4a85      	ldr	r2, [pc, #532]	; (8000e0c <HAL_GPIO_Init+0x290>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d016      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
 8000bfc:	4a84      	ldr	r2, [pc, #528]	; (8000e10 <HAL_GPIO_Init+0x294>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d013      	beq.n	8000c2a <HAL_GPIO_Init+0xae>
          break;
 8000c02:	e02c      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e028      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	3304      	adds	r3, #4
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	e023      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	3308      	adds	r3, #8
 8000c1c:	623b      	str	r3, [r7, #32]
          break;
 8000c1e:	e01e      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	330c      	adds	r3, #12
 8000c26:	623b      	str	r3, [r7, #32]
          break;
 8000c28:	e019      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d102      	bne.n	8000c38 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c32:	2304      	movs	r3, #4
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e012      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d105      	bne.n	8000c4c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c40:	2308      	movs	r3, #8
 8000c42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	69fa      	ldr	r2, [r7, #28]
 8000c48:	611a      	str	r2, [r3, #16]
          break;
 8000c4a:	e008      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c4c:	2308      	movs	r3, #8
 8000c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69fa      	ldr	r2, [r7, #28]
 8000c54:	615a      	str	r2, [r3, #20]
          break;
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
          break;
 8000c5c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d801      	bhi.n	8000c68 <HAL_GPIO_Init+0xec>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	e001      	b.n	8000c6c <HAL_GPIO_Init+0xf0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	2bff      	cmp	r3, #255	; 0xff
 8000c72:	d802      	bhi.n	8000c7a <HAL_GPIO_Init+0xfe>
 8000c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c76:	009b      	lsls	r3, r3, #2
 8000c78:	e002      	b.n	8000c80 <HAL_GPIO_Init+0x104>
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	3b08      	subs	r3, #8
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	210f      	movs	r1, #15
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	401a      	ands	r2, r3
 8000c92:	6a39      	ldr	r1, [r7, #32]
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 8096 	beq.w	8000dda <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <HAL_GPIO_Init+0x298>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <HAL_GPIO_Init+0x298>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b56      	ldr	r3, [pc, #344]	; (8000e14 <HAL_GPIO_Init+0x298>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cc6:	4a54      	ldr	r2, [pc, #336]	; (8000e18 <HAL_GPIO_Init+0x29c>)
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4b      	ldr	r2, [pc, #300]	; (8000e1c <HAL_GPIO_Init+0x2a0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d013      	beq.n	8000d1a <HAL_GPIO_Init+0x19e>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4a      	ldr	r2, [pc, #296]	; (8000e20 <HAL_GPIO_Init+0x2a4>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d00d      	beq.n	8000d16 <HAL_GPIO_Init+0x19a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a49      	ldr	r2, [pc, #292]	; (8000e24 <HAL_GPIO_Init+0x2a8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x196>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_GPIO_Init+0x2ac>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d101      	bne.n	8000d0e <HAL_GPIO_Init+0x192>
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e006      	b.n	8000d1c <HAL_GPIO_Init+0x1a0>
 8000d0e:	2304      	movs	r3, #4
 8000d10:	e004      	b.n	8000d1c <HAL_GPIO_Init+0x1a0>
 8000d12:	2302      	movs	r3, #2
 8000d14:	e002      	b.n	8000d1c <HAL_GPIO_Init+0x1a0>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <HAL_GPIO_Init+0x1a0>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d1e:	f002 0203 	and.w	r2, r2, #3
 8000d22:	0092      	lsls	r2, r2, #2
 8000d24:	4093      	lsls	r3, r2
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d2c:	493a      	ldr	r1, [pc, #232]	; (8000e18 <HAL_GPIO_Init+0x29c>)
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	089b      	lsrs	r3, r3, #2
 8000d32:	3302      	adds	r3, #2
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d46:	4b39      	ldr	r3, [pc, #228]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4938      	ldr	r1, [pc, #224]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	600b      	str	r3, [r1, #0]
 8000d52:	e006      	b.n	8000d62 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d54:	4b35      	ldr	r3, [pc, #212]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4933      	ldr	r1, [pc, #204]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d70:	685a      	ldr	r2, [r3, #4]
 8000d72:	492e      	ldr	r1, [pc, #184]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	604b      	str	r3, [r1, #4]
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4929      	ldr	r1, [pc, #164]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	4924      	ldr	r1, [pc, #144]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	608b      	str	r3, [r1, #8]
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000da6:	689a      	ldr	r2, [r3, #8]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	491f      	ldr	r1, [pc, #124]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000dc0:	68da      	ldr	r2, [r3, #12]
 8000dc2:	491a      	ldr	r1, [pc, #104]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60cb      	str	r3, [r1, #12]
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	4915      	ldr	r1, [pc, #84]	; (8000e2c <HAL_GPIO_Init+0x2b0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f47f aed0 	bne.w	8000b90 <HAL_GPIO_Init+0x14>
  }
}
 8000df0:	bf00      	nop
 8000df2:	372c      	adds	r7, #44	; 0x2c
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bc80      	pop	{r7}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	10210000 	.word	0x10210000
 8000e00:	10110000 	.word	0x10110000
 8000e04:	10120000 	.word	0x10120000
 8000e08:	10310000 	.word	0x10310000
 8000e0c:	10320000 	.word	0x10320000
 8000e10:	10220000 	.word	0x10220000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	40010800 	.word	0x40010800
 8000e20:	40010c00 	.word	0x40010c00
 8000e24:	40011000 	.word	0x40011000
 8000e28:	40011400 	.word	0x40011400
 8000e2c:	40010400 	.word	0x40010400

08000e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	887b      	ldrh	r3, [r7, #2]
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d002      	beq.n	8000e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e001      	b.n	8000e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr

08000e5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6e:	787b      	ldrb	r3, [r7, #1]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d003      	beq.n	8000e7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e74:	887a      	ldrh	r2, [r7, #2]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e7a:	e003      	b.n	8000e84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7c:	887b      	ldrh	r3, [r7, #2]
 8000e7e:	041a      	lsls	r2, r3, #16
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	611a      	str	r2, [r3, #16]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e26c      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8087 	beq.w	8000fbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb0:	4b92      	ldr	r3, [pc, #584]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d00c      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ebc:	4b8f      	ldr	r3, [pc, #572]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d112      	bne.n	8000eee <HAL_RCC_OscConfig+0x5e>
 8000ec8:	4b8c      	ldr	r3, [pc, #560]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed4:	d10b      	bne.n	8000eee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed6:	4b89      	ldr	r3, [pc, #548]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d06c      	beq.n	8000fbc <HAL_RCC_OscConfig+0x12c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d168      	bne.n	8000fbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e246      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef6:	d106      	bne.n	8000f06 <HAL_RCC_OscConfig+0x76>
 8000ef8:	4b80      	ldr	r3, [pc, #512]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a7f      	ldr	r2, [pc, #508]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	e02e      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x98>
 8000f0e:	4b7b      	ldr	r3, [pc, #492]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f18:	6013      	str	r3, [r2, #0]
 8000f1a:	4b78      	ldr	r3, [pc, #480]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a77      	ldr	r2, [pc, #476]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]
 8000f26:	e01d      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f30:	d10c      	bne.n	8000f4c <HAL_RCC_OscConfig+0xbc>
 8000f32:	4b72      	ldr	r3, [pc, #456]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a71      	ldr	r2, [pc, #452]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	4b6f      	ldr	r3, [pc, #444]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a6e      	ldr	r2, [pc, #440]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f48:	6013      	str	r3, [r2, #0]
 8000f4a:	e00b      	b.n	8000f64 <HAL_RCC_OscConfig+0xd4>
 8000f4c:	4b6b      	ldr	r3, [pc, #428]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a6a      	ldr	r2, [pc, #424]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f56:	6013      	str	r3, [r2, #0]
 8000f58:	4b68      	ldr	r3, [pc, #416]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a67      	ldr	r2, [pc, #412]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d013      	beq.n	8000f94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fcf6 	bl	800095c <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f74:	f7ff fcf2 	bl	800095c <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b64      	cmp	r3, #100	; 0x64
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e1fa      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f86:	4b5d      	ldr	r3, [pc, #372]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0xe4>
 8000f92:	e014      	b.n	8000fbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fce2 	bl	800095c <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fcde 	bl	800095c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e1e6      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fae:	4b53      	ldr	r3, [pc, #332]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1f0      	bne.n	8000f9c <HAL_RCC_OscConfig+0x10c>
 8000fba:	e000      	b.n	8000fbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d063      	beq.n	8001092 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fca:	4b4c      	ldr	r3, [pc, #304]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 030c 	and.w	r3, r3, #12
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fd6:	4b49      	ldr	r3, [pc, #292]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b08      	cmp	r3, #8
 8000fe0:	d11c      	bne.n	800101c <HAL_RCC_OscConfig+0x18c>
 8000fe2:	4b46      	ldr	r3, [pc, #280]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d116      	bne.n	800101c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <HAL_RCC_OscConfig+0x176>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	691b      	ldr	r3, [r3, #16]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d001      	beq.n	8001006 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e1ba      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001006:	4b3d      	ldr	r3, [pc, #244]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	00db      	lsls	r3, r3, #3
 8001014:	4939      	ldr	r1, [pc, #228]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001016:	4313      	orrs	r3, r2
 8001018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800101a:	e03a      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d020      	beq.n	8001066 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001024:	4b36      	ldr	r3, [pc, #216]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102a:	f7ff fc97 	bl	800095c <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001030:	e008      	b.n	8001044 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001032:	f7ff fc93 	bl	800095c <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d901      	bls.n	8001044 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001040:	2303      	movs	r3, #3
 8001042:	e19b      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f0      	beq.n	8001032 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	4927      	ldr	r1, [pc, #156]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e015      	b.n	8001092 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_RCC_OscConfig+0x270>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fc76 	bl	800095c <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001074:	f7ff fc72 	bl	800095c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e17a      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001086:	4b1d      	ldr	r3, [pc, #116]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d03a      	beq.n	8001114 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d019      	beq.n	80010da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_RCC_OscConfig+0x274>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ac:	f7ff fc56 	bl	800095c <HAL_GetTick>
 80010b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b4:	f7ff fc52 	bl	800095c <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e15a      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_RCC_OscConfig+0x26c>)
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f000 faa8 	bl	8001628 <RCC_Delay>
 80010d8:	e01c      	b.n	8001114 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_RCC_OscConfig+0x274>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e0:	f7ff fc3c 	bl	800095c <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e6:	e00f      	b.n	8001108 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc38 	bl	800095c <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d908      	bls.n	8001108 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e140      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000
 8001100:	42420000 	.word	0x42420000
 8001104:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1e9      	bne.n	80010e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a6 	beq.w	800126e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b97      	ldr	r3, [pc, #604]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001128:	69db      	ldr	r3, [r3, #28]
 800112a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10d      	bne.n	800114e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b94      	ldr	r3, [pc, #592]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a93      	ldr	r2, [pc, #588]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b91      	ldr	r3, [pc, #580]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114e:	4b8e      	ldr	r3, [pc, #568]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	2b00      	cmp	r3, #0
 8001158:	d118      	bne.n	800118c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115a:	4b8b      	ldr	r3, [pc, #556]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a8a      	ldr	r2, [pc, #552]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001166:	f7ff fbf9 	bl	800095c <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800116e:	f7ff fbf5 	bl	800095c <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b64      	cmp	r3, #100	; 0x64
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e0fd      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <HAL_RCC_OscConfig+0x4f8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d106      	bne.n	80011a2 <HAL_RCC_OscConfig+0x312>
 8001194:	4b7b      	ldr	r3, [pc, #492]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	4a7a      	ldr	r2, [pc, #488]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6213      	str	r3, [r2, #32]
 80011a0:	e02d      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x334>
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ac:	6a1b      	ldr	r3, [r3, #32]
 80011ae:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6213      	str	r3, [r2, #32]
 80011b6:	4b73      	ldr	r3, [pc, #460]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011b8:	6a1b      	ldr	r3, [r3, #32]
 80011ba:	4a72      	ldr	r2, [pc, #456]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	f023 0304 	bic.w	r3, r3, #4
 80011c0:	6213      	str	r3, [r2, #32]
 80011c2:	e01c      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b05      	cmp	r3, #5
 80011ca:	d10c      	bne.n	80011e6 <HAL_RCC_OscConfig+0x356>
 80011cc:	4b6d      	ldr	r3, [pc, #436]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	4a6c      	ldr	r2, [pc, #432]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6213      	str	r3, [r2, #32]
 80011d8:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a69      	ldr	r2, [pc, #420]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6213      	str	r3, [r2, #32]
 80011e4:	e00b      	b.n	80011fe <HAL_RCC_OscConfig+0x36e>
 80011e6:	4b67      	ldr	r3, [pc, #412]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4a66      	ldr	r2, [pc, #408]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	f023 0301 	bic.w	r3, r3, #1
 80011f0:	6213      	str	r3, [r2, #32]
 80011f2:	4b64      	ldr	r3, [pc, #400]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011f4:	6a1b      	ldr	r3, [r3, #32]
 80011f6:	4a63      	ldr	r2, [pc, #396]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80011f8:	f023 0304 	bic.w	r3, r3, #4
 80011fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d015      	beq.n	8001232 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001206:	f7ff fba9 	bl	800095c <HAL_GetTick>
 800120a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800120c:	e00a      	b.n	8001224 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120e:	f7ff fba5 	bl	800095c <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	f241 3288 	movw	r2, #5000	; 0x1388
 800121c:	4293      	cmp	r3, r2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e0ab      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	4b57      	ldr	r3, [pc, #348]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0ee      	beq.n	800120e <HAL_RCC_OscConfig+0x37e>
 8001230:	e014      	b.n	800125c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff fb93 	bl	800095c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fb8f 	bl	800095c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	f241 3288 	movw	r2, #5000	; 0x1388
 8001248:	4293      	cmp	r3, r2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e095      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1ee      	bne.n	800123a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d105      	bne.n	800126e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001262:	4b48      	ldr	r3, [pc, #288]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	4a47      	ldr	r2, [pc, #284]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001268:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800126c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	69db      	ldr	r3, [r3, #28]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 8081 	beq.w	800137a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001278:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 030c 	and.w	r3, r3, #12
 8001280:	2b08      	cmp	r3, #8
 8001282:	d061      	beq.n	8001348 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	2b02      	cmp	r3, #2
 800128a:	d146      	bne.n	800131a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb63 	bl	800095c <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fb5f 	bl	800095c <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e067      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012ac:	4b35      	ldr	r3, [pc, #212]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f0      	bne.n	800129a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c0:	d108      	bne.n	80012d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012c2:	4b30      	ldr	r3, [pc, #192]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	492d      	ldr	r1, [pc, #180]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012d0:	4313      	orrs	r3, r2
 80012d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d4:	4b2b      	ldr	r3, [pc, #172]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a19      	ldr	r1, [r3, #32]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	430b      	orrs	r3, r1
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f2:	f7ff fb33 	bl	800095c <HAL_GetTick>
 80012f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f8:	e008      	b.n	800130c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fa:	f7ff fb2f 	bl	800095c <HAL_GetTick>
 80012fe:	4602      	mov	r2, r0
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	2b02      	cmp	r3, #2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e037      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d0f0      	beq.n	80012fa <HAL_RCC_OscConfig+0x46a>
 8001318:	e02f      	b.n	800137a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_RCC_OscConfig+0x4fc>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb1c 	bl	800095c <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb18 	bl	800095c <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e020      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x498>
 8001346:	e018      	b.n	800137a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69db      	ldr	r3, [r3, #28]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e013      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a1b      	ldr	r3, [r3, #32]
 8001364:	429a      	cmp	r2, r3
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	429a      	cmp	r2, r3
 8001374:	d001      	beq.n	800137a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40021000 	.word	0x40021000
 8001388:	40007000 	.word	0x40007000
 800138c:	42420060 	.word	0x42420060

08001390 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e0d0      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013a4:	4b6a      	ldr	r3, [pc, #424]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d910      	bls.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013b2:	4b67      	ldr	r3, [pc, #412]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 0207 	bic.w	r2, r3, #7
 80013ba:	4965      	ldr	r1, [pc, #404]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013c2:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e0b8      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d020      	beq.n	8001422 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013ec:	4b59      	ldr	r3, [pc, #356]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80013f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a52      	ldr	r2, [pc, #328]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800140e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b50      	ldr	r3, [pc, #320]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	494d      	ldr	r1, [pc, #308]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b47      	ldr	r3, [pc, #284]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d115      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e07f      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b41      	ldr	r3, [pc, #260]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e073      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06b      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f023 0203 	bic.w	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4936      	ldr	r1, [pc, #216]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800147c:	4313      	orrs	r3, r2
 800147e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff fa6c 	bl	800095c <HAL_GetTick>
 8001484:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	e00a      	b.n	800149e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001488:	f7ff fa68 	bl	800095c <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	; 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e053      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b2d      	ldr	r3, [pc, #180]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 020c 	and.w	r2, r3, #12
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1eb      	bne.n	8001488 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b27      	ldr	r3, [pc, #156]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d210      	bcs.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b24      	ldr	r3, [pc, #144]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f023 0207 	bic.w	r2, r3, #7
 80014c6:	4922      	ldr	r1, [pc, #136]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ce:	4b20      	ldr	r3, [pc, #128]	; (8001550 <HAL_RCC_ClockConfig+0x1c0>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d001      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e032      	b.n	8001546 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d008      	beq.n	80014fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	4916      	ldr	r1, [pc, #88]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0308 	and.w	r3, r3, #8
 8001506:	2b00      	cmp	r3, #0
 8001508:	d009      	beq.n	800151e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	490e      	ldr	r1, [pc, #56]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 800151a:	4313      	orrs	r3, r2
 800151c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800151e:	f000 f821 	bl	8001564 <HAL_RCC_GetSysClockFreq>
 8001522:	4601      	mov	r1, r0
 8001524:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <HAL_RCC_ClockConfig+0x1c4>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	4a0a      	ldr	r2, [pc, #40]	; (8001558 <HAL_RCC_ClockConfig+0x1c8>)
 8001530:	5cd3      	ldrb	r3, [r2, r3]
 8001532:	fa21 f303 	lsr.w	r3, r1, r3
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_RCC_ClockConfig+0x1cc>)
 8001538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <HAL_RCC_ClockConfig+0x1d0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f9ca 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40022000 	.word	0x40022000
 8001554:	40021000 	.word	0x40021000
 8001558:	08001824 	.word	0x08001824
 800155c:	20000014 	.word	0x20000014
 8001560:	20000018 	.word	0x20000018

08001564 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001564:	b490      	push	{r4, r7}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800156a:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb0>)
 800156c:	1d3c      	adds	r4, r7, #4
 800156e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001574:	4b28      	ldr	r3, [pc, #160]	; (8001618 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	2300      	movs	r3, #0
 8001580:	61bb      	str	r3, [r7, #24]
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	2b04      	cmp	r3, #4
 800159c:	d002      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x40>
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d003      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x46>
 80015a2:	e02d      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a6:	623b      	str	r3, [r7, #32]
      break;
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	0c9b      	lsrs	r3, r3, #18
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015b6:	4413      	add	r3, r2
 80015b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	0c5b      	lsrs	r3, r3, #17
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015d6:	4413      	add	r3, r2
 80015d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015e2:	fb02 f203 	mul.w	r2, r2, r3
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
 80015ee:	e004      	b.n	80015fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	623b      	str	r3, [r7, #32]
      break;
 80015fe:	e002      	b.n	8001606 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001600:	4b07      	ldr	r3, [pc, #28]	; (8001620 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001602:	623b      	str	r3, [r7, #32]
      break;
 8001604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001606:	6a3b      	ldr	r3, [r7, #32]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bc90      	pop	{r4, r7}
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	08001810 	.word	0x08001810
 8001618:	08001820 	.word	0x08001820
 800161c:	40021000 	.word	0x40021000
 8001620:	007a1200 	.word	0x007a1200
 8001624:	003d0900 	.word	0x003d0900

08001628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001628:	b480      	push	{r7}
 800162a:	b085      	sub	sp, #20
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <RCC_Delay+0x34>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <RCC_Delay+0x38>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0a5b      	lsrs	r3, r3, #9
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001644:	bf00      	nop
  }
  while (Delay --);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	60fa      	str	r2, [r7, #12]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f9      	bne.n	8001644 <RCC_Delay+0x1c>
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000014 	.word	0x20000014
 8001660:	10624dd3 	.word	0x10624dd3

08001664 <__errno>:
 8001664:	4b01      	ldr	r3, [pc, #4]	; (800166c <__errno+0x8>)
 8001666:	6818      	ldr	r0, [r3, #0]
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000020 	.word	0x20000020

08001670 <__libc_init_array>:
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	2500      	movs	r5, #0
 8001674:	4e0c      	ldr	r6, [pc, #48]	; (80016a8 <__libc_init_array+0x38>)
 8001676:	4c0d      	ldr	r4, [pc, #52]	; (80016ac <__libc_init_array+0x3c>)
 8001678:	1ba4      	subs	r4, r4, r6
 800167a:	10a4      	asrs	r4, r4, #2
 800167c:	42a5      	cmp	r5, r4
 800167e:	d109      	bne.n	8001694 <__libc_init_array+0x24>
 8001680:	f000 f8ba 	bl	80017f8 <_init>
 8001684:	2500      	movs	r5, #0
 8001686:	4e0a      	ldr	r6, [pc, #40]	; (80016b0 <__libc_init_array+0x40>)
 8001688:	4c0a      	ldr	r4, [pc, #40]	; (80016b4 <__libc_init_array+0x44>)
 800168a:	1ba4      	subs	r4, r4, r6
 800168c:	10a4      	asrs	r4, r4, #2
 800168e:	42a5      	cmp	r5, r4
 8001690:	d105      	bne.n	800169e <__libc_init_array+0x2e>
 8001692:	bd70      	pop	{r4, r5, r6, pc}
 8001694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001698:	4798      	blx	r3
 800169a:	3501      	adds	r5, #1
 800169c:	e7ee      	b.n	800167c <__libc_init_array+0xc>
 800169e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016a2:	4798      	blx	r3
 80016a4:	3501      	adds	r5, #1
 80016a6:	e7f2      	b.n	800168e <__libc_init_array+0x1e>
 80016a8:	08001834 	.word	0x08001834
 80016ac:	08001834 	.word	0x08001834
 80016b0:	08001834 	.word	0x08001834
 80016b4:	08001838 	.word	0x08001838

080016b8 <memset>:
 80016b8:	4603      	mov	r3, r0
 80016ba:	4402      	add	r2, r0
 80016bc:	4293      	cmp	r3, r2
 80016be:	d100      	bne.n	80016c2 <memset+0xa>
 80016c0:	4770      	bx	lr
 80016c2:	f803 1b01 	strb.w	r1, [r3], #1
 80016c6:	e7f9      	b.n	80016bc <memset+0x4>

080016c8 <srand>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <srand+0x38>)
 80016cc:	4605      	mov	r5, r0
 80016ce:	681c      	ldr	r4, [r3, #0]
 80016d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016d2:	b97b      	cbnz	r3, 80016f4 <srand+0x2c>
 80016d4:	2018      	movs	r0, #24
 80016d6:	f000 f81b 	bl	8001710 <malloc>
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <srand+0x3c>)
 80016dc:	4b0a      	ldr	r3, [pc, #40]	; (8001708 <srand+0x40>)
 80016de:	63a0      	str	r0, [r4, #56]	; 0x38
 80016e0:	e9c0 2300 	strd	r2, r3, [r0]
 80016e4:	4b09      	ldr	r3, [pc, #36]	; (800170c <srand+0x44>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	6083      	str	r3, [r0, #8]
 80016ea:	230b      	movs	r3, #11
 80016ec:	8183      	strh	r3, [r0, #12]
 80016ee:	2300      	movs	r3, #0
 80016f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80016f4:	2200      	movs	r2, #0
 80016f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016f8:	611d      	str	r5, [r3, #16]
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	bd38      	pop	{r3, r4, r5, pc}
 80016fe:	bf00      	nop
 8001700:	20000020 	.word	0x20000020
 8001704:	abcd330e 	.word	0xabcd330e
 8001708:	e66d1234 	.word	0xe66d1234
 800170c:	0005deec 	.word	0x0005deec

08001710 <malloc>:
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <malloc+0xc>)
 8001712:	4601      	mov	r1, r0
 8001714:	6818      	ldr	r0, [r3, #0]
 8001716:	f000 b803 	b.w	8001720 <_malloc_r>
 800171a:	bf00      	nop
 800171c:	20000020 	.word	0x20000020

08001720 <_malloc_r>:
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	1ccd      	adds	r5, r1, #3
 8001724:	f025 0503 	bic.w	r5, r5, #3
 8001728:	3508      	adds	r5, #8
 800172a:	2d0c      	cmp	r5, #12
 800172c:	bf38      	it	cc
 800172e:	250c      	movcc	r5, #12
 8001730:	2d00      	cmp	r5, #0
 8001732:	4606      	mov	r6, r0
 8001734:	db01      	blt.n	800173a <_malloc_r+0x1a>
 8001736:	42a9      	cmp	r1, r5
 8001738:	d903      	bls.n	8001742 <_malloc_r+0x22>
 800173a:	230c      	movs	r3, #12
 800173c:	6033      	str	r3, [r6, #0]
 800173e:	2000      	movs	r0, #0
 8001740:	bd70      	pop	{r4, r5, r6, pc}
 8001742:	f000 f857 	bl	80017f4 <__malloc_lock>
 8001746:	4a21      	ldr	r2, [pc, #132]	; (80017cc <_malloc_r+0xac>)
 8001748:	6814      	ldr	r4, [r2, #0]
 800174a:	4621      	mov	r1, r4
 800174c:	b991      	cbnz	r1, 8001774 <_malloc_r+0x54>
 800174e:	4c20      	ldr	r4, [pc, #128]	; (80017d0 <_malloc_r+0xb0>)
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	b91b      	cbnz	r3, 800175c <_malloc_r+0x3c>
 8001754:	4630      	mov	r0, r6
 8001756:	f000 f83d 	bl	80017d4 <_sbrk_r>
 800175a:	6020      	str	r0, [r4, #0]
 800175c:	4629      	mov	r1, r5
 800175e:	4630      	mov	r0, r6
 8001760:	f000 f838 	bl	80017d4 <_sbrk_r>
 8001764:	1c43      	adds	r3, r0, #1
 8001766:	d124      	bne.n	80017b2 <_malloc_r+0x92>
 8001768:	230c      	movs	r3, #12
 800176a:	4630      	mov	r0, r6
 800176c:	6033      	str	r3, [r6, #0]
 800176e:	f000 f842 	bl	80017f6 <__malloc_unlock>
 8001772:	e7e4      	b.n	800173e <_malloc_r+0x1e>
 8001774:	680b      	ldr	r3, [r1, #0]
 8001776:	1b5b      	subs	r3, r3, r5
 8001778:	d418      	bmi.n	80017ac <_malloc_r+0x8c>
 800177a:	2b0b      	cmp	r3, #11
 800177c:	d90f      	bls.n	800179e <_malloc_r+0x7e>
 800177e:	600b      	str	r3, [r1, #0]
 8001780:	18cc      	adds	r4, r1, r3
 8001782:	50cd      	str	r5, [r1, r3]
 8001784:	4630      	mov	r0, r6
 8001786:	f000 f836 	bl	80017f6 <__malloc_unlock>
 800178a:	f104 000b 	add.w	r0, r4, #11
 800178e:	1d23      	adds	r3, r4, #4
 8001790:	f020 0007 	bic.w	r0, r0, #7
 8001794:	1ac3      	subs	r3, r0, r3
 8001796:	d0d3      	beq.n	8001740 <_malloc_r+0x20>
 8001798:	425a      	negs	r2, r3
 800179a:	50e2      	str	r2, [r4, r3]
 800179c:	e7d0      	b.n	8001740 <_malloc_r+0x20>
 800179e:	684b      	ldr	r3, [r1, #4]
 80017a0:	428c      	cmp	r4, r1
 80017a2:	bf16      	itet	ne
 80017a4:	6063      	strne	r3, [r4, #4]
 80017a6:	6013      	streq	r3, [r2, #0]
 80017a8:	460c      	movne	r4, r1
 80017aa:	e7eb      	b.n	8001784 <_malloc_r+0x64>
 80017ac:	460c      	mov	r4, r1
 80017ae:	6849      	ldr	r1, [r1, #4]
 80017b0:	e7cc      	b.n	800174c <_malloc_r+0x2c>
 80017b2:	1cc4      	adds	r4, r0, #3
 80017b4:	f024 0403 	bic.w	r4, r4, #3
 80017b8:	42a0      	cmp	r0, r4
 80017ba:	d005      	beq.n	80017c8 <_malloc_r+0xa8>
 80017bc:	1a21      	subs	r1, r4, r0
 80017be:	4630      	mov	r0, r6
 80017c0:	f000 f808 	bl	80017d4 <_sbrk_r>
 80017c4:	3001      	adds	r0, #1
 80017c6:	d0cf      	beq.n	8001768 <_malloc_r+0x48>
 80017c8:	6025      	str	r5, [r4, #0]
 80017ca:	e7db      	b.n	8001784 <_malloc_r+0x64>
 80017cc:	20000138 	.word	0x20000138
 80017d0:	2000013c 	.word	0x2000013c

080017d4 <_sbrk_r>:
 80017d4:	b538      	push	{r3, r4, r5, lr}
 80017d6:	2300      	movs	r3, #0
 80017d8:	4c05      	ldr	r4, [pc, #20]	; (80017f0 <_sbrk_r+0x1c>)
 80017da:	4605      	mov	r5, r0
 80017dc:	4608      	mov	r0, r1
 80017de:	6023      	str	r3, [r4, #0]
 80017e0:	f7ff f802 	bl	80007e8 <_sbrk>
 80017e4:	1c43      	adds	r3, r0, #1
 80017e6:	d102      	bne.n	80017ee <_sbrk_r+0x1a>
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	b103      	cbz	r3, 80017ee <_sbrk_r+0x1a>
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	bd38      	pop	{r3, r4, r5, pc}
 80017f0:	20000144 	.word	0x20000144

080017f4 <__malloc_lock>:
 80017f4:	4770      	bx	lr

080017f6 <__malloc_unlock>:
 80017f6:	4770      	bx	lr

080017f8 <_init>:
 80017f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fa:	bf00      	nop
 80017fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fe:	bc08      	pop	{r3}
 8001800:	469e      	mov	lr, r3
 8001802:	4770      	bx	lr

08001804 <_fini>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr
